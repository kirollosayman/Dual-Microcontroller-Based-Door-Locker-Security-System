
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000243c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000243c  000024d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080007e  0080007e  000024ee  2**0
                  ALLOC
  3 .stab         000026f4  00000000  00000000  000024f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000143f  00000000  00000000  00004be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006023  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006163  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000062d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a76f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__vector_4>
      14:	0c 94 90 0d 	jmp	0x1b20	; 0x1b20 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__vector_9>
      28:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__vector_10>
      2c:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
/*
 * Description :
 * Initializes the buzzer pin direction and turn off the buzzer.
*/
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//Initializes the buzzer pin direction
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_setupPinDirection>
	// Turn off the buzzer
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
/*
 * Description :
 Activates the buzzer.
*/
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
/*
 * Description :
 Deactivates the buzzer.
*/
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:
void Waiting (void);
void Door_open(void);

//main Function
int main (void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	ab 97       	sbiw	r28, 0x2b	; 43
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     bac:	af e5       	ldi	r26, 0x5F	; 95
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ef e5       	ldi	r30, 0x5F	; 95
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	8c 93       	st	X, r24

	/* intial values */
	flags.start=1;
     bba:	80 91 90 00 	lds	r24, 0x0090
     bbe:	81 60       	ori	r24, 0x01	; 1
     bc0:	80 93 90 00 	sts	0x0090, r24

	/*call init functions*/
	Buzzer_init();
     bc4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	PIRSensor_init();
     bc8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <PIRSensor_init>
	DcMotor_Init();
     bcc:	0e 94 78 08 	call	0x10f0	; 0x10f0 <DcMotor_Init>

	/* Create configuration structure for ICU driver */
	UART_ConfigType UART_Configurations = {EGIGHT,EVEN,ONE,38400};
     bd0:	ce 01       	movw	r24, r28
     bd2:	80 96       	adiw	r24, 0x20	; 32
     bd4:	98 a7       	std	Y+40, r25	; 0x28
     bd6:	8f a3       	std	Y+39, r24	; 0x27
     bd8:	e8 e6       	ldi	r30, 0x68	; 104
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	fa a7       	std	Y+42, r31	; 0x2a
     bde:	e9 a7       	std	Y+41, r30	; 0x29
     be0:	f7 e0       	ldi	r31, 0x07	; 7
     be2:	fb a7       	std	Y+43, r31	; 0x2b
     be4:	e9 a5       	ldd	r30, Y+41	; 0x29
     be6:	fa a5       	ldd	r31, Y+42	; 0x2a
     be8:	00 80       	ld	r0, Z
     bea:	89 a5       	ldd	r24, Y+41	; 0x29
     bec:	9a a5       	ldd	r25, Y+42	; 0x2a
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	9a a7       	std	Y+42, r25	; 0x2a
     bf2:	89 a7       	std	Y+41, r24	; 0x29
     bf4:	ef a1       	ldd	r30, Y+39	; 0x27
     bf6:	f8 a5       	ldd	r31, Y+40	; 0x28
     bf8:	00 82       	st	Z, r0
     bfa:	8f a1       	ldd	r24, Y+39	; 0x27
     bfc:	98 a5       	ldd	r25, Y+40	; 0x28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	98 a7       	std	Y+40, r25	; 0x28
     c02:	8f a3       	std	Y+39, r24	; 0x27
     c04:	9b a5       	ldd	r25, Y+43	; 0x2b
     c06:	91 50       	subi	r25, 0x01	; 1
     c08:	9b a7       	std	Y+43, r25	; 0x2b
     c0a:	eb a5       	ldd	r30, Y+43	; 0x2b
     c0c:	ee 23       	and	r30, r30
     c0e:	51 f7       	brne	.-44     	; 0xbe4 <main+0x4c>
	UART_init(&UART_Configurations);
     c10:	ce 01       	movw	r24, r28
     c12:	80 96       	adiw	r24, 0x20	; 32
     c14:	0e 94 a4 10 	call	0x2148	; 0x2148 <UART_init>


	while(1)
	{
		//Create password
		if(flags.start)
     c18:	80 91 90 00 	lds	r24, 0x0090
     c1c:	81 70       	andi	r24, 0x01	; 1
     c1e:	88 23       	and	r24, r24
     c20:	09 f4       	brne	.+2      	; 0xc24 <main+0x8c>
     c22:	97 c0       	rjmp	.+302    	; 0xd52 <main+0x1ba>
		{
			Check_password (10);
     c24:	8a e0       	ldi	r24, 0x0A	; 10
     c26:	0e 94 7b 07 	call	0xef6	; 0xef6 <Check_password>
			if(flags.error==0)
     c2a:	80 91 90 00 	lds	r24, 0x0090
     c2e:	82 70       	andi	r24, 0x02	; 2
     c30:	88 23       	and	r24, r24
     c32:	91 f7       	brne	.-28     	; 0xc18 <main+0x80>
			{
				//close the start flag
				flags.start=0;
     c34:	80 91 90 00 	lds	r24, 0x0090
     c38:	8e 7f       	andi	r24, 0xFE	; 254
     c3a:	80 93 90 00 	sts	0x0090, r24
				//send password to eeprom
				for(uint8 count=0;count<5;count++)
     c3e:	1f 8e       	std	Y+31, r1	; 0x1f
     c40:	83 c0       	rjmp	.+262    	; 0xd48 <main+0x1b0>
				{
					EEPROM_writeByte((uint16)count, password[count]);
     c42:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c44:	48 2f       	mov	r20, r24
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	fc 01       	movw	r30, r24
     c50:	ea 57       	subi	r30, 0x7A	; 122
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	20 81       	ld	r18, Z
     c56:	ca 01       	movw	r24, r20
     c58:	62 2f       	mov	r22, r18
     c5a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <EEPROM_writeByte>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a0 e2       	ldi	r26, 0x20	; 32
     c64:	b1 e4       	ldi	r27, 0x41	; 65
     c66:	89 8f       	std	Y+25, r24	; 0x19
     c68:	9a 8f       	std	Y+26, r25	; 0x1a
     c6a:	ab 8f       	std	Y+27, r26	; 0x1b
     c6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6e:	69 8d       	ldd	r22, Y+25	; 0x19
     c70:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c72:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c74:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	4a ef       	ldi	r20, 0xFA	; 250
     c7c:	54 e4       	ldi	r21, 0x44	; 68
     c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	8d 8b       	std	Y+21, r24	; 0x15
     c88:	9e 8b       	std	Y+22, r25	; 0x16
     c8a:	af 8b       	std	Y+23, r26	; 0x17
     c8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c8e:	6d 89       	ldd	r22, Y+21	; 0x15
     c90:	7e 89       	ldd	r23, Y+22	; 0x16
     c92:	8f 89       	ldd	r24, Y+23	; 0x17
     c94:	98 8d       	ldd	r25, Y+24	; 0x18
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e8       	ldi	r20, 0x80	; 128
     c9c:	5f e3       	ldi	r21, 0x3F	; 63
     c9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ca2:	88 23       	and	r24, r24
     ca4:	2c f4       	brge	.+10     	; 0xcb0 <main+0x118>
		__ticks = 1;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	9c 8b       	std	Y+20, r25	; 0x14
     cac:	8b 8b       	std	Y+19, r24	; 0x13
     cae:	3f c0       	rjmp	.+126    	; 0xd2e <main+0x196>
	else if (__tmp > 65535)
     cb0:	6d 89       	ldd	r22, Y+21	; 0x15
     cb2:	7e 89       	ldd	r23, Y+22	; 0x16
     cb4:	8f 89       	ldd	r24, Y+23	; 0x17
     cb6:	98 8d       	ldd	r25, Y+24	; 0x18
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	3f ef       	ldi	r19, 0xFF	; 255
     cbc:	4f e7       	ldi	r20, 0x7F	; 127
     cbe:	57 e4       	ldi	r21, 0x47	; 71
     cc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cc4:	18 16       	cp	r1, r24
     cc6:	4c f5       	brge	.+82     	; 0xd1a <main+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e2       	ldi	r20, 0x20	; 32
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	9c 8b       	std	Y+20, r25	; 0x14
     cee:	8b 8b       	std	Y+19, r24	; 0x13
     cf0:	0f c0       	rjmp	.+30     	; 0xd10 <main+0x178>
     cf2:	88 ec       	ldi	r24, 0xC8	; 200
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	9a 8b       	std	Y+18, r25	; 0x12
     cf8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cfa:	89 89       	ldd	r24, Y+17	; 0x11
     cfc:	9a 89       	ldd	r25, Y+18	; 0x12
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <main+0x166>
     d02:	9a 8b       	std	Y+18, r25	; 0x12
     d04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d06:	8b 89       	ldd	r24, Y+19	; 0x13
     d08:	9c 89       	ldd	r25, Y+20	; 0x14
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	9c 8b       	std	Y+20, r25	; 0x14
     d0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d10:	8b 89       	ldd	r24, Y+19	; 0x13
     d12:	9c 89       	ldd	r25, Y+20	; 0x14
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	69 f7       	brne	.-38     	; 0xcf2 <main+0x15a>
     d18:	14 c0       	rjmp	.+40     	; 0xd42 <main+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1a:	6d 89       	ldd	r22, Y+21	; 0x15
     d1c:	7e 89       	ldd	r23, Y+22	; 0x16
     d1e:	8f 89       	ldd	r24, Y+23	; 0x17
     d20:	98 8d       	ldd	r25, Y+24	; 0x18
     d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	9c 8b       	std	Y+20, r25	; 0x14
     d2c:	8b 8b       	std	Y+19, r24	; 0x13
     d2e:	8b 89       	ldd	r24, Y+19	; 0x13
     d30:	9c 89       	ldd	r25, Y+20	; 0x14
     d32:	98 8b       	std	Y+16, r25	; 0x10
     d34:	8f 87       	std	Y+15, r24	; 0x0f
     d36:	8f 85       	ldd	r24, Y+15	; 0x0f
     d38:	98 89       	ldd	r25, Y+16	; 0x10
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <main+0x1a2>
     d3e:	98 8b       	std	Y+16, r25	; 0x10
     d40:	8f 87       	std	Y+15, r24	; 0x0f
			if(flags.error==0)
			{
				//close the start flag
				flags.start=0;
				//send password to eeprom
				for(uint8 count=0;count<5;count++)
     d42:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d44:	8f 5f       	subi	r24, 0xFF	; 255
     d46:	8f 8f       	std	Y+31, r24	; 0x1f
     d48:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d4a:	85 30       	cpi	r24, 0x05	; 5
     d4c:	08 f4       	brcc	.+2      	; 0xd50 <main+0x1b8>
     d4e:	79 cf       	rjmp	.-270    	; 0xc42 <main+0xaa>
     d50:	63 cf       	rjmp	.-314    	; 0xc18 <main+0x80>
		}
		//password is created
		else
		{
			//Wait to get the option
			flags.option = (UART_recieveByte() & 0x01);
     d52:	0e 94 29 11 	call	0x2252	; 0x2252 <UART_recieveByte>
     d56:	81 70       	andi	r24, 0x01	; 1
     d58:	81 70       	andi	r24, 0x01	; 1
     d5a:	81 70       	andi	r24, 0x01	; 1
     d5c:	81 70       	andi	r24, 0x01	; 1
     d5e:	98 2f       	mov	r25, r24
     d60:	99 0f       	add	r25, r25
     d62:	99 0f       	add	r25, r25
     d64:	80 91 90 00 	lds	r24, 0x0090
     d68:	8b 7f       	andi	r24, 0xFB	; 251
     d6a:	89 2b       	or	r24, r25
     d6c:	80 93 90 00 	sts	0x0090, r24
			//Check the password
			//insert stored password in last 5 digits in array
			for(uint8 count=0;count<5;count++)
     d70:	1e 8e       	std	Y+30, r1	; 0x1e
     d72:	11 c0       	rjmp	.+34     	; 0xd96 <main+0x1fe>
			{
				EEPROM_readByte(count,password+count+5);
     d74:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d76:	48 2f       	mov	r20, r24
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	05 96       	adiw	r24, 0x05	; 5
     d82:	9c 01       	movw	r18, r24
     d84:	2a 57       	subi	r18, 0x7A	; 122
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	ca 01       	movw	r24, r20
     d8a:	b9 01       	movw	r22, r18
     d8c:	0e 94 3b 09 	call	0x1276	; 0x1276 <EEPROM_readByte>
		{
			//Wait to get the option
			flags.option = (UART_recieveByte() & 0x01);
			//Check the password
			//insert stored password in last 5 digits in array
			for(uint8 count=0;count<5;count++)
     d90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d92:	8f 5f       	subi	r24, 0xFF	; 255
     d94:	8e 8f       	std	Y+30, r24	; 0x1e
     d96:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d98:	85 30       	cpi	r24, 0x05	; 5
     d9a:	60 f3       	brcs	.-40     	; 0xd74 <main+0x1dc>
			{
				EEPROM_readByte(count,password+count+5);
			}
			//check if matches
			Check_password (5);
     d9c:	85 e0       	ldi	r24, 0x05	; 5
     d9e:	0e 94 7b 07 	call	0xef6	; 0xef6 <Check_password>
			//password is correct
			if(flags.error==0)
     da2:	80 91 90 00 	lds	r24, 0x0090
     da6:	82 70       	andi	r24, 0x02	; 2
     da8:	88 23       	and	r24, r24
     daa:	71 f4       	brne	.+28     	; 0xdc8 <main+0x230>
			{
				//change password option
				if(flags.option)
     dac:	80 91 90 00 	lds	r24, 0x0090
     db0:	84 70       	andi	r24, 0x04	; 4
     db2:	88 23       	and	r24, r24
     db4:	31 f0       	breq	.+12     	; 0xdc2 <main+0x22a>
				{
					flags.start=1;
     db6:	80 91 90 00 	lds	r24, 0x0090
     dba:	81 60       	ori	r24, 0x01	; 1
     dbc:	80 93 90 00 	sts	0x0090, r24
     dc0:	2b cf       	rjmp	.-426    	; 0xc18 <main+0x80>
				}
				//open the door option
				else
				{
					Door_open();
     dc2:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Door_open>
     dc6:	28 cf       	rjmp	.-432    	; 0xc18 <main+0x80>
				}
			}
			else
			{
				//check password for last time
				Check_password (5);
     dc8:	85 e0       	ldi	r24, 0x05	; 5
     dca:	0e 94 7b 07 	call	0xef6	; 0xef6 <Check_password>
				//password is wrong
				if(flags.error)
     dce:	80 91 90 00 	lds	r24, 0x0090
     dd2:	82 70       	andi	r24, 0x02	; 2
     dd4:	88 23       	and	r24, r24
     dd6:	09 f4       	brne	.+2      	; 0xdda <main+0x242>
     dd8:	80 c0       	rjmp	.+256    	; 0xeda <main+0x342>
				{
					//Turn on buzzer for 1 min
					Buzzer_on();
     dda:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
					for(uint8 count=0;count<60;count++)
     dde:	1d 8e       	std	Y+29, r1	; 0x1d
     de0:	75 c0       	rjmp	.+234    	; 0xecc <main+0x334>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	aa e7       	ldi	r26, 0x7A	; 122
     de8:	b4 e4       	ldi	r27, 0x44	; 68
     dea:	8b 87       	std	Y+11, r24	; 0x0b
     dec:	9c 87       	std	Y+12, r25	; 0x0c
     dee:	ad 87       	std	Y+13, r26	; 0x0d
     df0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df2:	6b 85       	ldd	r22, Y+11	; 0x0b
     df4:	7c 85       	ldd	r23, Y+12	; 0x0c
     df6:	8d 85       	ldd	r24, Y+13	; 0x0d
     df8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	4a ef       	ldi	r20, 0xFA	; 250
     e00:	54 e4       	ldi	r21, 0x44	; 68
     e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	8f 83       	std	Y+7, r24	; 0x07
     e0c:	98 87       	std	Y+8, r25	; 0x08
     e0e:	a9 87       	std	Y+9, r26	; 0x09
     e10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e12:	6f 81       	ldd	r22, Y+7	; 0x07
     e14:	78 85       	ldd	r23, Y+8	; 0x08
     e16:	89 85       	ldd	r24, Y+9	; 0x09
     e18:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e8       	ldi	r20, 0x80	; 128
     e20:	5f e3       	ldi	r21, 0x3F	; 63
     e22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e26:	88 23       	and	r24, r24
     e28:	2c f4       	brge	.+10     	; 0xe34 <main+0x29c>
		__ticks = 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9e 83       	std	Y+6, r25	; 0x06
     e30:	8d 83       	std	Y+5, r24	; 0x05
     e32:	3f c0       	rjmp	.+126    	; 0xeb2 <main+0x31a>
	else if (__tmp > 65535)
     e34:	6f 81       	ldd	r22, Y+7	; 0x07
     e36:	78 85       	ldd	r23, Y+8	; 0x08
     e38:	89 85       	ldd	r24, Y+9	; 0x09
     e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	3f ef       	ldi	r19, 0xFF	; 255
     e40:	4f e7       	ldi	r20, 0x7F	; 127
     e42:	57 e4       	ldi	r21, 0x47	; 71
     e44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e48:	18 16       	cp	r1, r24
     e4a:	4c f5       	brge	.+82     	; 0xe9e <main+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e50:	8d 85       	ldd	r24, Y+13	; 0x0d
     e52:	9e 85       	ldd	r25, Y+14	; 0x0e
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e2       	ldi	r20, 0x20	; 32
     e5a:	51 e4       	ldi	r21, 0x41	; 65
     e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	8d 83       	std	Y+5, r24	; 0x05
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <main+0x2fc>
     e76:	88 ec       	ldi	r24, 0xC8	; 200
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9c 83       	std	Y+4, r25	; 0x04
     e7c:	8b 83       	std	Y+3, r24	; 0x03
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <main+0x2ea>
     e86:	9c 83       	std	Y+4, r25	; 0x04
     e88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	9e 83       	std	Y+6, r25	; 0x06
     e92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	9e 81       	ldd	r25, Y+6	; 0x06
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	69 f7       	brne	.-38     	; 0xe76 <main+0x2de>
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <main+0x326>
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	8d 8f       	std	Y+29, r24	; 0x1d
     ecc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ece:	8c 33       	cpi	r24, 0x3C	; 60
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <main+0x33c>
     ed2:	87 cf       	rjmp	.-242    	; 0xde2 <main+0x24a>
					{
						_delay_ms(1000);
					}
					Buzzer_off();
     ed4:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
     ed8:	9f ce       	rjmp	.-706    	; 0xc18 <main+0x80>
				}
				else
				{
					//change password option
					if(flags.option)
     eda:	80 91 90 00 	lds	r24, 0x0090
     ede:	84 70       	andi	r24, 0x04	; 4
     ee0:	88 23       	and	r24, r24
     ee2:	31 f0       	breq	.+12     	; 0xef0 <main+0x358>
					{
						flags.start=1;
     ee4:	80 91 90 00 	lds	r24, 0x0090
     ee8:	81 60       	ori	r24, 0x01	; 1
     eea:	80 93 90 00 	sts	0x0090, r24
     eee:	94 ce       	rjmp	.-728    	; 0xc18 <main+0x80>
					}
					//open the door option
					else
					{
						Door_open();
     ef0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <Door_open>
     ef4:	91 ce       	rjmp	.-734    	; 0xc18 <main+0x80>

00000ef6 <Check_password>:
		}
	}
}

void Check_password (uint8 No_of_digits)
{
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <Check_password+0xa>
     f00:	0f 92       	push	r0
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	8b 83       	std	Y+3, r24	; 0x03
	//clear error flag if happens
	flags.error=0;
     f08:	80 91 90 00 	lds	r24, 0x0090
     f0c:	8d 7f       	andi	r24, 0xFD	; 253
     f0e:	80 93 90 00 	sts	0x0090, r24
	for(uint8 count=0;count<No_of_digits;count++)
     f12:	1a 82       	std	Y+2, r1	; 0x02
     f14:	0c c0       	rjmp	.+24     	; 0xf2e <Check_password+0x38>
	{
		password[count]=UART_recieveByte();
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	08 2f       	mov	r16, r24
     f1a:	10 e0       	ldi	r17, 0x00	; 0
     f1c:	0e 94 29 11 	call	0x2252	; 0x2252 <UART_recieveByte>
     f20:	f8 01       	movw	r30, r16
     f22:	ea 57       	subi	r30, 0x7A	; 122
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	80 83       	st	Z, r24

void Check_password (uint8 No_of_digits)
{
	//clear error flag if happens
	flags.error=0;
	for(uint8 count=0;count<No_of_digits;count++)
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	8a 83       	std	Y+2, r24	; 0x02
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	98 17       	cp	r25, r24
     f34:	80 f3       	brcs	.-32     	; 0xf16 <Check_password+0x20>
	{
		password[count]=UART_recieveByte();
	}
	//check if first 5 digits = second ones
	for(uint8 count=0;count<5;count++)
     f36:	19 82       	std	Y+1, r1	; 0x01
     f38:	1a c0       	rjmp	.+52     	; 0xf6e <Check_password+0x78>
	{
		if(password[count] != password[count+5])
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	88 2f       	mov	r24, r24
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	fc 01       	movw	r30, r24
     f42:	ea 57       	subi	r30, 0x7A	; 122
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	20 81       	ld	r18, Z
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	05 96       	adiw	r24, 0x05	; 5
     f50:	fc 01       	movw	r30, r24
     f52:	ea 57       	subi	r30, 0x7A	; 122
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 81       	ld	r24, Z
     f58:	28 17       	cp	r18, r24
     f5a:	31 f0       	breq	.+12     	; 0xf68 <Check_password+0x72>
		{
			flags.error=1;
     f5c:	80 91 90 00 	lds	r24, 0x0090
     f60:	82 60       	ori	r24, 0x02	; 2
     f62:	80 93 90 00 	sts	0x0090, r24
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <Check_password+0x7e>
	for(uint8 count=0;count<No_of_digits;count++)
	{
		password[count]=UART_recieveByte();
	}
	//check if first 5 digits = second ones
	for(uint8 count=0;count<5;count++)
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	85 30       	cpi	r24, 0x05	; 5
     f72:	18 f3       	brcs	.-58     	; 0xf3a <Check_password+0x44>
		{
			flags.error=1;
			break;
		}
	}
	if(flags.error)
     f74:	80 91 90 00 	lds	r24, 0x0090
     f78:	82 70       	andi	r24, 0x02	; 2
     f7a:	88 23       	and	r24, r24
     f7c:	21 f0       	breq	.+8      	; 0xf86 <Check_password+0x90>
	{
		//send failure to HMI ECU
		UART_sendByte(0x00);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	0e 94 12 11 	call	0x2224	; 0x2224 <UART_sendByte>
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <Check_password+0x96>
	}
	else
	{
		//send success to HMI ECU
		UART_sendByte(0x01);
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	0e 94 12 11 	call	0x2224	; 0x2224 <UART_sendByte>
	}
}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	08 95       	ret

00000f9c <Waiting>:

void Waiting (void)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
	static uint8 tic =0;
	tic++;
     fa4:	80 91 7e 00 	lds	r24, 0x007E
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	80 93 7e 00 	sts	0x007E, r24
	if(tic==2)
     fae:	80 91 7e 00 	lds	r24, 0x007E
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	51 f4       	brne	.+20     	; 0xfca <Waiting+0x2e>
	{
		flags.wait=0;
     fb6:	80 91 90 00 	lds	r24, 0x0090
     fba:	8f 7e       	andi	r24, 0xEF	; 239
     fbc:	80 93 90 00 	sts	0x0090, r24
		tic=0;
     fc0:	10 92 7e 00 	sts	0x007E, r1
		//close the timer
		Timer_deInit(TIMER1);
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <Timer_deInit>
	}
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <Door_open>:

void Door_open(void)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	68 97       	sbiw	r28, 0x18	; 24
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
	//Turn on dc motor cw for 15 sec
	DcMotor_Rotate(CW,100);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	64 e6       	ldi	r22, 0x64	; 100
     fe8:	0e 94 98 08 	call	0x1130	; 0x1130 <DcMotor_Rotate>
	//initialize timer to wait 15 sec
	flags.wait=1;
     fec:	80 91 90 00 	lds	r24, 0x0090
     ff0:	80 61       	ori	r24, 0x10	; 16
     ff2:	80 93 90 00 	sts	0x0090, r24
	//Initialize timer to wait 15 sec and set the callback function
	{
		Timer_ConfigType TIMER_Configurations = {0,58593,TIMER1,F_CPU_1024,CTC};
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	98 8b       	std	Y+16, r25	; 0x10
     ffc:	8f 87       	std	Y+15, r24	; 0x0f
     ffe:	e6 e7       	ldi	r30, 0x76	; 118
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	fa 8b       	std	Y+18, r31	; 0x12
    1004:	e9 8b       	std	Y+17, r30	; 0x11
    1006:	f7 e0       	ldi	r31, 0x07	; 7
    1008:	fb 8b       	std	Y+19, r31	; 0x13
    100a:	e9 89       	ldd	r30, Y+17	; 0x11
    100c:	fa 89       	ldd	r31, Y+18	; 0x12
    100e:	00 80       	ld	r0, Z
    1010:	89 89       	ldd	r24, Y+17	; 0x11
    1012:	9a 89       	ldd	r25, Y+18	; 0x12
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	9a 8b       	std	Y+18, r25	; 0x12
    1018:	89 8b       	std	Y+17, r24	; 0x11
    101a:	ef 85       	ldd	r30, Y+15	; 0x0f
    101c:	f8 89       	ldd	r31, Y+16	; 0x10
    101e:	00 82       	st	Z, r0
    1020:	8f 85       	ldd	r24, Y+15	; 0x0f
    1022:	98 89       	ldd	r25, Y+16	; 0x10
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	98 8b       	std	Y+16, r25	; 0x10
    1028:	8f 87       	std	Y+15, r24	; 0x0f
    102a:	9b 89       	ldd	r25, Y+19	; 0x13
    102c:	91 50       	subi	r25, 0x01	; 1
    102e:	9b 8b       	std	Y+19, r25	; 0x13
    1030:	eb 89       	ldd	r30, Y+19	; 0x13
    1032:	ee 23       	and	r30, r30
    1034:	51 f7       	brne	.-44     	; 0x100a <Door_open+0x3a>
		Timer_init(&TIMER_Configurations);
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <Timer_init>
		Timer_setCallBack(Waiting,TIMER1);
    103e:	8e ec       	ldi	r24, 0xCE	; 206
    1040:	97 e0       	ldi	r25, 0x07	; 7
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <Timer_setCallBack>
	}
	while(flags.wait);
    1048:	80 91 90 00 	lds	r24, 0x0090
    104c:	80 71       	andi	r24, 0x10	; 16
    104e:	88 23       	and	r24, r24
    1050:	d9 f7       	brne	.-10     	; 0x1048 <Door_open+0x78>
	//Stop the motor
	DcMotor_Rotate(stop,100);
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	64 e6       	ldi	r22, 0x64	; 100
    1056:	0e 94 98 08 	call	0x1130	; 0x1130 <DcMotor_Rotate>
	//wait will pir is reading
	while(PIR_getState());
    105a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <PIR_getState>
    105e:	88 23       	and	r24, r24
    1060:	e1 f7       	brne	.-8      	; 0x105a <Door_open+0x8a>
	//Send anything to HMI ECU to start closing
	UART_sendByte(0x00);
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	0e 94 12 11 	call	0x2224	; 0x2224 <UART_sendByte>
	//closing the door
	//Turn on dc motor A-cw for 15 sec
	DcMotor_Rotate(A_CW,100);
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	64 e6       	ldi	r22, 0x64	; 100
    106c:	0e 94 98 08 	call	0x1130	; 0x1130 <DcMotor_Rotate>
	//initialize timer to wait 15 sec
	flags.wait=1;
    1070:	80 91 90 00 	lds	r24, 0x0090
    1074:	80 61       	ori	r24, 0x10	; 16
    1076:	80 93 90 00 	sts	0x0090, r24
	//Initialize timer to wait 15 sec and set the callback function
	{
		Timer_ConfigType TIMER_Configurations = {0,58593,TIMER1,F_CPU_1024,CTC};
    107a:	ce 01       	movw	r24, r28
    107c:	08 96       	adiw	r24, 0x08	; 8
    107e:	9d 8b       	std	Y+21, r25	; 0x15
    1080:	8c 8b       	std	Y+20, r24	; 0x14
    1082:	ef e6       	ldi	r30, 0x6F	; 111
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	ff 8b       	std	Y+23, r31	; 0x17
    1088:	ee 8b       	std	Y+22, r30	; 0x16
    108a:	f7 e0       	ldi	r31, 0x07	; 7
    108c:	f8 8f       	std	Y+24, r31	; 0x18
    108e:	ee 89       	ldd	r30, Y+22	; 0x16
    1090:	ff 89       	ldd	r31, Y+23	; 0x17
    1092:	00 80       	ld	r0, Z
    1094:	8e 89       	ldd	r24, Y+22	; 0x16
    1096:	9f 89       	ldd	r25, Y+23	; 0x17
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	9f 8b       	std	Y+23, r25	; 0x17
    109c:	8e 8b       	std	Y+22, r24	; 0x16
    109e:	ec 89       	ldd	r30, Y+20	; 0x14
    10a0:	fd 89       	ldd	r31, Y+21	; 0x15
    10a2:	00 82       	st	Z, r0
    10a4:	8c 89       	ldd	r24, Y+20	; 0x14
    10a6:	9d 89       	ldd	r25, Y+21	; 0x15
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	9d 8b       	std	Y+21, r25	; 0x15
    10ac:	8c 8b       	std	Y+20, r24	; 0x14
    10ae:	98 8d       	ldd	r25, Y+24	; 0x18
    10b0:	91 50       	subi	r25, 0x01	; 1
    10b2:	98 8f       	std	Y+24, r25	; 0x18
    10b4:	e8 8d       	ldd	r30, Y+24	; 0x18
    10b6:	ee 23       	and	r30, r30
    10b8:	51 f7       	brne	.-44     	; 0x108e <Door_open+0xbe>
		Timer_init(&TIMER_Configurations);
    10ba:	ce 01       	movw	r24, r28
    10bc:	08 96       	adiw	r24, 0x08	; 8
    10be:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <Timer_init>
		Timer_setCallBack(Waiting,TIMER1);
    10c2:	8e ec       	ldi	r24, 0xCE	; 206
    10c4:	97 e0       	ldi	r25, 0x07	; 7
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <Timer_setCallBack>
	}
	while(flags.wait);
    10cc:	80 91 90 00 	lds	r24, 0x0090
    10d0:	80 71       	andi	r24, 0x10	; 16
    10d2:	88 23       	and	r24, r24
    10d4:	d9 f7       	brne	.-10     	; 0x10cc <Door_open+0xfc>
	//Stop the motor
	DcMotor_Rotate(stop,100);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	64 e6       	ldi	r22, 0x64	; 100
    10da:	0e 94 98 08 	call	0x1130	; 0x1130 <DcMotor_Rotate>
}
    10de:	68 96       	adiw	r28, 0x18	; 24
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <DcMotor_Init>:
 * Description :
 * Initializes all DC motor pins direction.
   Turn off the motor at start
*/
void DcMotor_Init(void)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
	//Initializes all motor pins direction
	GPIO_setupPinDirection(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,PIN_OUTPUT);
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	66 e0       	ldi	r22, 0x06	; 6
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    10fe:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,PIN_OUTPUT);
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	67 e0       	ldi	r22, 0x07	; 7
    1106:	41 e0       	ldi	r20, 0x01	; 1
    1108:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_EN_PORT_ID,DC_MOTOR_EN_PIN_ID,PIN_OUTPUT);
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	63 e0       	ldi	r22, 0x03	; 3
    1110:	41 e0       	ldi	r20, 0x01	; 1
    1112:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_setupPinDirection>
	// Stop motor at the beginning
	GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    1116:	83 e0       	ldi	r24, 0x03	; 3
    1118:	66 e0       	ldi	r22, 0x06	; 6
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	67 e0       	ldi	r22, 0x07	; 7
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
}
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <DcMotor_Rotate>:
 * Description :
 * Controls the motor's state (Clockwise/Anti-Clockwise/Stop) and adjusts the speed based
on the input duty cycle
*/
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <DcMotor_Rotate+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <DcMotor_Rotate+0x8>
    1138:	0f 92       	push	r0
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	8a 83       	std	Y+2, r24	; 0x02
    1140:	6b 83       	std	Y+3, r22	; 0x03
	uint8 duty_cycle=0;
    1142:	19 82       	std	Y+1, r1	; 0x01
	duty_cycle=(uint8)((uint32)speed*255/100);
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a0 e0       	ldi	r26, 0x00	; 0
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	2f ef       	ldi	r18, 0xFF	; 255
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 a4 11 	call	0x2348	; 0x2348 <__mulsi3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	24 e6       	ldi	r18, 0x64	; 100
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	0e 94 c3 11 	call	0x2386	; 0x2386 <__udivmodsi4>
    1172:	da 01       	movw	r26, r20
    1174:	c9 01       	movw	r24, r18
    1176:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Start(duty_cycle);
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <PWM_Timer0_Start>
	switch (state)
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3d 83       	std	Y+5, r19	; 0x05
    1186:	2c 83       	std	Y+4, r18	; 0x04
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	a1 f0       	breq	.+40     	; 0x11ba <DcMotor_Rotate+0x8a>
    1192:	2c 81       	ldd	r18, Y+4	; 0x04
    1194:	3d 81       	ldd	r19, Y+5	; 0x05
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	d1 f0       	breq	.+52     	; 0x11d0 <DcMotor_Rotate+0xa0>
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	01 f5       	brne	.+64     	; 0x11e4 <DcMotor_Rotate+0xb4>
	{
		case stop:
			GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	66 e0       	ldi	r22, 0x06	; 6
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	67 e0       	ldi	r22, 0x07	; 7
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
    11b8:	15 c0       	rjmp	.+42     	; 0x11e4 <DcMotor_Rotate+0xb4>
			break;
		case CW:
			GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_LOW);
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	66 e0       	ldi	r22, 0x06	; 6
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_HIGH);
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	67 e0       	ldi	r22, 0x07	; 7
    11c8:	41 e0       	ldi	r20, 0x01	; 1
    11ca:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
    11ce:	0a c0       	rjmp	.+20     	; 0x11e4 <DcMotor_Rotate+0xb4>
			break;
		case A_CW:
			GPIO_writePin(DC_MOTOR_IN1_PORT_ID,DC_MOTOR_IN1_PIN_ID,LOGIC_HIGH);
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	66 e0       	ldi	r22, 0x06	; 6
    11d4:	41 e0       	ldi	r20, 0x01	; 1
    11d6:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_IN2_PORT_ID,DC_MOTOR_IN2_PIN_ID,LOGIC_LOW);
    11da:	83 e0       	ldi	r24, 0x03	; 3
    11dc:	67 e0       	ldi	r22, 0x07	; 7
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	0e 94 86 0a 	call	0x150c	; 0x150c <GPIO_writePin>
	}
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <EEPROM_writeByte+0x6>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <EEPROM_writeByte+0x8>
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1206:	0e 94 3d 10 	call	0x207a	; 0x207a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    120a:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    120e:	88 30       	cpi	r24, 0x08	; 8
    1210:	11 f0       	breq	.+4      	; 0x1216 <EEPROM_writeByte+0x22>
        return ERROR;
    1212:	1c 82       	std	Y+4, r1	; 0x04
    1214:	28 c0       	rjmp	.+80     	; 0x1266 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	80 70       	andi	r24, 0x00	; 0
    121c:	97 70       	andi	r25, 0x07	; 7
    121e:	88 0f       	add	r24, r24
    1220:	89 2f       	mov	r24, r25
    1222:	88 1f       	adc	r24, r24
    1224:	99 0b       	sbc	r25, r25
    1226:	91 95       	neg	r25
    1228:	80 6a       	ori	r24, 0xA0	; 160
    122a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    122e:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    1232:	88 31       	cpi	r24, 0x18	; 24
    1234:	11 f0       	breq	.+4      	; 0x123a <EEPROM_writeByte+0x46>
        return ERROR; 
    1236:	1c 82       	std	Y+4, r1	; 0x04
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1240:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    1244:	88 32       	cpi	r24, 0x28	; 40
    1246:	11 f0       	breq	.+4      	; 0x124c <EEPROM_writeByte+0x58>
        return ERROR;
    1248:	1c 82       	std	Y+4, r1	; 0x04
    124a:	0d c0       	rjmp	.+26     	; 0x1266 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1252:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    1256:	88 32       	cpi	r24, 0x28	; 40
    1258:	11 f0       	breq	.+4      	; 0x125e <EEPROM_writeByte+0x6a>
        return ERROR;
    125a:	1c 82       	std	Y+4, r1	; 0x04
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    125e:	0e 94 4d 10 	call	0x209a	; 0x209a <TWI_stop>
	
    return SUCCESS;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	8c 83       	std	Y+4, r24	; 0x04
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <EEPROM_readByte+0x6>
    127c:	00 d0       	rcall	.+0      	; 0x127e <EEPROM_readByte+0x8>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	7c 83       	std	Y+4, r23	; 0x04
    128a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    128c:	0e 94 3d 10 	call	0x207a	; 0x207a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1290:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	11 f0       	breq	.+4      	; 0x129c <EEPROM_readByte+0x26>
        return ERROR;
    1298:	1d 82       	std	Y+5, r1	; 0x05
    129a:	44 c0       	rjmp	.+136    	; 0x1324 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	80 70       	andi	r24, 0x00	; 0
    12a2:	97 70       	andi	r25, 0x07	; 7
    12a4:	88 0f       	add	r24, r24
    12a6:	89 2f       	mov	r24, r25
    12a8:	88 1f       	adc	r24, r24
    12aa:	99 0b       	sbc	r25, r25
    12ac:	91 95       	neg	r25
    12ae:	80 6a       	ori	r24, 0xA0	; 160
    12b0:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12b4:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    12b8:	88 31       	cpi	r24, 0x18	; 24
    12ba:	11 f0       	breq	.+4      	; 0x12c0 <EEPROM_readByte+0x4a>
        return ERROR;
    12bc:	1d 82       	std	Y+5, r1	; 0x05
    12be:	32 c0       	rjmp	.+100    	; 0x1324 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12c6:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    12ca:	88 32       	cpi	r24, 0x28	; 40
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <EEPROM_readByte+0x5c>
        return ERROR;
    12ce:	1d 82       	std	Y+5, r1	; 0x05
    12d0:	29 c0       	rjmp	.+82     	; 0x1324 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    12d2:	0e 94 3d 10 	call	0x207a	; 0x207a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    12d6:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    12da:	80 31       	cpi	r24, 0x10	; 16
    12dc:	11 f0       	breq	.+4      	; 0x12e2 <EEPROM_readByte+0x6c>
        return ERROR;
    12de:	1d 82       	std	Y+5, r1	; 0x05
    12e0:	21 c0       	rjmp	.+66     	; 0x1324 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	9a 81       	ldd	r25, Y+2	; 0x02
    12e6:	80 70       	andi	r24, 0x00	; 0
    12e8:	97 70       	andi	r25, 0x07	; 7
    12ea:	88 0f       	add	r24, r24
    12ec:	89 2f       	mov	r24, r25
    12ee:	88 1f       	adc	r24, r24
    12f0:	99 0b       	sbc	r25, r25
    12f2:	91 95       	neg	r25
    12f4:	81 6a       	ori	r24, 0xA1	; 161
    12f6:	0e 94 58 10 	call	0x20b0	; 0x20b0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12fa:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    12fe:	80 34       	cpi	r24, 0x40	; 64
    1300:	11 f0       	breq	.+4      	; 0x1306 <EEPROM_readByte+0x90>
        return ERROR;
    1302:	1d 82       	std	Y+5, r1	; 0x05
    1304:	0f c0       	rjmp	.+30     	; 0x1324 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1306:	0e 94 82 10 	call	0x2104	; 0x2104 <TWI_readByteWithNACK>
    130a:	eb 81       	ldd	r30, Y+3	; 0x03
    130c:	fc 81       	ldd	r31, Y+4	; 0x04
    130e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1310:	0e 94 95 10 	call	0x212a	; 0x212a <TWI_getStatus>
    1314:	88 35       	cpi	r24, 0x58	; 88
    1316:	11 f0       	breq	.+4      	; 0x131c <EEPROM_readByte+0xa6>
        return ERROR;
    1318:	1d 82       	std	Y+5, r1	; 0x05
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    131c:	0e 94 4d 10 	call	0x209a	; 0x209a <TWI_stop>

    return SUCCESS;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	8d 83       	std	Y+5, r24	; 0x05
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <GPIO_setupPinDirection+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <GPIO_setupPinDirection+0x8>
    133e:	0f 92       	push	r0
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6a 83       	std	Y+2, r22	; 0x02
    1348:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	88 30       	cpi	r24, 0x08	; 8
    134e:	08 f0       	brcs	.+2      	; 0x1352 <GPIO_setupPinDirection+0x1c>
    1350:	d5 c0       	rjmp	.+426    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	08 f0       	brcs	.+2      	; 0x135a <GPIO_setupPinDirection+0x24>
    1358:	d1 c0       	rjmp	.+418    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	3d 83       	std	Y+5, r19	; 0x05
    1362:	2c 83       	std	Y+4, r18	; 0x04
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	91 05       	cpc	r25, r1
    136c:	09 f4       	brne	.+2      	; 0x1370 <GPIO_setupPinDirection+0x3a>
    136e:	43 c0       	rjmp	.+134    	; 0x13f6 <GPIO_setupPinDirection+0xc0>
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	2c f4       	brge	.+10     	; 0x1384 <GPIO_setupPinDirection+0x4e>
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	71 f0       	breq	.+28     	; 0x139e <GPIO_setupPinDirection+0x68>
    1382:	bc c0       	rjmp	.+376    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
    1384:	2c 81       	ldd	r18, Y+4	; 0x04
    1386:	3d 81       	ldd	r19, Y+5	; 0x05
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <GPIO_setupPinDirection+0x5a>
    138e:	5f c0       	rjmp	.+190    	; 0x144e <GPIO_setupPinDirection+0x118>
    1390:	8c 81       	ldd	r24, Y+4	; 0x04
    1392:	9d 81       	ldd	r25, Y+5	; 0x05
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <GPIO_setupPinDirection+0x66>
    139a:	85 c0       	rjmp	.+266    	; 0x14a6 <GPIO_setupPinDirection+0x170>
    139c:	af c0       	rjmp	.+350    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	a1 f4       	brne	.+40     	; 0x13cc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13a4:	aa e3       	ldi	r26, 0x3A	; 58
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ea e3       	ldi	r30, 0x3A	; 58
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <GPIO_setupPinDirection+0x8c>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <GPIO_setupPinDirection+0x88>
    13c6:	84 2b       	or	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	98 c0       	rjmp	.+304    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13cc:	aa e3       	ldi	r26, 0x3A	; 58
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ea e3       	ldi	r30, 0x3A	; 58
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <GPIO_setupPinDirection+0xb4>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <GPIO_setupPinDirection+0xb0>
    13ee:	80 95       	com	r24
    13f0:	84 23       	and	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	83 c0       	rjmp	.+262    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	a1 f4       	brne	.+40     	; 0x1424 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13fc:	a7 e3       	ldi	r26, 0x37	; 55
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e7 e3       	ldi	r30, 0x37	; 55
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <GPIO_setupPinDirection+0xe4>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <GPIO_setupPinDirection+0xe0>
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	6c c0       	rjmp	.+216    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1424:	a7 e3       	ldi	r26, 0x37	; 55
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e7 e3       	ldi	r30, 0x37	; 55
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <GPIO_setupPinDirection+0x10c>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <GPIO_setupPinDirection+0x108>
    1446:	80 95       	com	r24
    1448:	84 23       	and	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	57 c0       	rjmp	.+174    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	a1 f4       	brne	.+40     	; 0x147c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1454:	a4 e3       	ldi	r26, 0x34	; 52
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e4 e3       	ldi	r30, 0x34	; 52
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <GPIO_setupPinDirection+0x13c>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <GPIO_setupPinDirection+0x138>
    1476:	84 2b       	or	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	40 c0       	rjmp	.+128    	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    147c:	a4 e3       	ldi	r26, 0x34	; 52
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e4 e3       	ldi	r30, 0x34	; 52
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <GPIO_setupPinDirection+0x164>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <GPIO_setupPinDirection+0x160>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	2b c0       	rjmp	.+86     	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	a1 f4       	brne	.+40     	; 0x14d4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14ac:	a1 e3       	ldi	r26, 0x31	; 49
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e1 e3       	ldi	r30, 0x31	; 49
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_setupPinDirection+0x194>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_setupPinDirection+0x190>
    14ce:	84 2b       	or	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14d4:	a1 e3       	ldi	r26, 0x31	; 49
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e1 e3       	ldi	r30, 0x31	; 49
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_setupPinDirection+0x1bc>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_setupPinDirection+0x1b8>
    14f6:	80 95       	com	r24
    14f8:	84 23       	and	r24, r20
    14fa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <GPIO_writePin+0x6>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <GPIO_writePin+0x8>
    1514:	0f 92       	push	r0
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	6a 83       	std	Y+2, r22	; 0x02
    151e:	4b 83       	std	Y+3, r20	; 0x03
	/*
		 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
		 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
		 * In this case the input is not valid port/pin number
		 */
		if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	88 30       	cpi	r24, 0x08	; 8
    1524:	08 f0       	brcs	.+2      	; 0x1528 <GPIO_writePin+0x1c>
    1526:	d5 c0       	rjmp	.+426    	; 0x16d2 <GPIO_writePin+0x1c6>
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	08 f0       	brcs	.+2      	; 0x1530 <GPIO_writePin+0x24>
    152e:	d1 c0       	rjmp	.+418    	; 0x16d2 <GPIO_writePin+0x1c6>
			/* Do Nothing */
		}
		else
		{
			/* Setup the pin value if it is output or turn on internal pull up on or off */
			switch(port_num)
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3d 83       	std	Y+5, r19	; 0x05
    1538:	2c 83       	std	Y+4, r18	; 0x04
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <GPIO_writePin+0x3a>
    1544:	43 c0       	rjmp	.+134    	; 0x15cc <GPIO_writePin+0xc0>
    1546:	2c 81       	ldd	r18, Y+4	; 0x04
    1548:	3d 81       	ldd	r19, Y+5	; 0x05
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	2c f4       	brge	.+10     	; 0x155a <GPIO_writePin+0x4e>
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	9d 81       	ldd	r25, Y+5	; 0x05
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	71 f0       	breq	.+28     	; 0x1574 <GPIO_writePin+0x68>
    1558:	bc c0       	rjmp	.+376    	; 0x16d2 <GPIO_writePin+0x1c6>
    155a:	2c 81       	ldd	r18, Y+4	; 0x04
    155c:	3d 81       	ldd	r19, Y+5	; 0x05
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <GPIO_writePin+0x5a>
    1564:	5f c0       	rjmp	.+190    	; 0x1624 <GPIO_writePin+0x118>
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <GPIO_writePin+0x66>
    1570:	85 c0       	rjmp	.+266    	; 0x167c <GPIO_writePin+0x170>
    1572:	af c0       	rjmp	.+350    	; 0x16d2 <GPIO_writePin+0x1c6>
			{
				case PORTA_ID:
					if(value == LOGIC_HIGH)
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	a1 f4       	brne	.+40     	; 0x15a2 <GPIO_writePin+0x96>
					{
						SET_BIT(PORTA,pin_num);
    157a:	ab e3       	ldi	r26, 0x3B	; 59
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	eb e3       	ldi	r30, 0x3B	; 59
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <GPIO_writePin+0x8c>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <GPIO_writePin+0x88>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	98 c0       	rjmp	.+304    	; 0x16d2 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTA,pin_num);
    15a2:	ab e3       	ldi	r26, 0x3B	; 59
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <GPIO_writePin+0xb4>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <GPIO_writePin+0xb0>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	83 c0       	rjmp	.+262    	; 0x16d2 <GPIO_writePin+0x1c6>
					}
					break;
				case PORTB_ID:
					if(value == LOGIC_HIGH)
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	a1 f4       	brne	.+40     	; 0x15fa <GPIO_writePin+0xee>
					{
						SET_BIT(PORTB,pin_num);
    15d2:	a8 e3       	ldi	r26, 0x38	; 56
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <GPIO_writePin+0xe4>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <GPIO_writePin+0xe0>
    15f4:	84 2b       	or	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	6c c0       	rjmp	.+216    	; 0x16d2 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTB,pin_num);
    15fa:	a8 e3       	ldi	r26, 0x38	; 56
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e8 e3       	ldi	r30, 0x38	; 56
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <GPIO_writePin+0x10c>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <GPIO_writePin+0x108>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	57 c0       	rjmp	.+174    	; 0x16d2 <GPIO_writePin+0x1c6>
					}
					break;
				case PORTC_ID:
					if(value == LOGIC_HIGH)
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	a1 f4       	brne	.+40     	; 0x1652 <GPIO_writePin+0x146>
					{
						SET_BIT(PORTC,pin_num);
    162a:	a5 e3       	ldi	r26, 0x35	; 53
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e5 e3       	ldi	r30, 0x35	; 53
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <GPIO_writePin+0x13c>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <GPIO_writePin+0x138>
    164c:	84 2b       	or	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	40 c0       	rjmp	.+128    	; 0x16d2 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTC,pin_num);
    1652:	a5 e3       	ldi	r26, 0x35	; 53
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e3       	ldi	r30, 0x35	; 53
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_writePin+0x164>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_writePin+0x160>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	2b c0       	rjmp	.+86     	; 0x16d2 <GPIO_writePin+0x1c6>
					}
					break;
				case PORTD_ID:
					if(value == LOGIC_HIGH)
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	a1 f4       	brne	.+40     	; 0x16aa <GPIO_writePin+0x19e>
					{
						SET_BIT(PORTD,pin_num);
    1682:	a2 e3       	ldi	r26, 0x32	; 50
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e2 e3       	ldi	r30, 0x32	; 50
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <GPIO_writePin+0x194>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <GPIO_writePin+0x190>
    16a4:	84 2b       	or	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTD,pin_num);
    16aa:	a2 e3       	ldi	r26, 0x32	; 50
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e2 e3       	ldi	r30, 0x32	; 50
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_writePin+0x1bc>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_writePin+0x1b8>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
					}
					break;
			}
		}
}
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_readPin+0x6>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <GPIO_readPin+0x8>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <GPIO_readPin+0xa>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	88 30       	cpi	r24, 0x08	; 8
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <GPIO_readPin+0x1a>
    16fa:	85 c0       	rjmp	.+266    	; 0x1806 <GPIO_readPin+0x124>
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	84 30       	cpi	r24, 0x04	; 4
    1700:	08 f0       	brcs	.+2      	; 0x1704 <GPIO_readPin+0x22>
    1702:	81 c0       	rjmp	.+258    	; 0x1806 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value */
		switch(port_num)
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	3d 83       	std	Y+5, r19	; 0x05
    170c:	2c 83       	std	Y+4, r18	; 0x04
    170e:	4c 81       	ldd	r20, Y+4	; 0x04
    1710:	5d 81       	ldd	r21, Y+5	; 0x05
    1712:	41 30       	cpi	r20, 0x01	; 1
    1714:	51 05       	cpc	r21, r1
    1716:	79 f1       	breq	.+94     	; 0x1776 <GPIO_readPin+0x94>
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	9d 81       	ldd	r25, Y+5	; 0x05
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	91 05       	cpc	r25, r1
    1720:	34 f4       	brge	.+12     	; 0x172e <GPIO_readPin+0x4c>
    1722:	2c 81       	ldd	r18, Y+4	; 0x04
    1724:	3d 81       	ldd	r19, Y+5	; 0x05
    1726:	21 15       	cp	r18, r1
    1728:	31 05       	cpc	r19, r1
    172a:	69 f0       	breq	.+26     	; 0x1746 <GPIO_readPin+0x64>
    172c:	6c c0       	rjmp	.+216    	; 0x1806 <GPIO_readPin+0x124>
    172e:	4c 81       	ldd	r20, Y+4	; 0x04
    1730:	5d 81       	ldd	r21, Y+5	; 0x05
    1732:	42 30       	cpi	r20, 0x02	; 2
    1734:	51 05       	cpc	r21, r1
    1736:	b9 f1       	breq	.+110    	; 0x17a6 <GPIO_readPin+0xc4>
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	91 05       	cpc	r25, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <GPIO_readPin+0x62>
    1742:	49 c0       	rjmp	.+146    	; 0x17d6 <GPIO_readPin+0xf4>
    1744:	60 c0       	rjmp	.+192    	; 0x1806 <GPIO_readPin+0x124>
		{
			case PORTA_ID:
				if(BIT_IS_SET(PINA,pin_num))
    1746:	e9 e3       	ldi	r30, 0x39	; 57
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	88 2f       	mov	r24, r24
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a9 01       	movw	r20, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <GPIO_readPin+0x7c>
    175a:	55 95       	asr	r21
    175c:	47 95       	ror	r20
    175e:	8a 95       	dec	r24
    1760:	e2 f7       	brpl	.-8      	; 0x175a <GPIO_readPin+0x78>
    1762:	ca 01       	movw	r24, r20
    1764:	81 70       	andi	r24, 0x01	; 1
    1766:	90 70       	andi	r25, 0x00	; 0
    1768:	88 23       	and	r24, r24
    176a:	19 f0       	breq	.+6      	; 0x1772 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH;
    176c:	51 e0       	ldi	r21, 0x01	; 1
    176e:	5b 83       	std	Y+3, r21	; 0x03
    1770:	4b c0       	rjmp	.+150    	; 0x1808 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1772:	1b 82       	std	Y+3, r1	; 0x03
    1774:	49 c0       	rjmp	.+146    	; 0x1808 <GPIO_readPin+0x126>
				}
				break;
			case PORTB_ID:
				if(BIT_IS_SET(PINB,pin_num))
    1776:	e6 e3       	ldi	r30, 0x36	; 54
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a9 01       	movw	r20, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <GPIO_readPin+0xac>
    178a:	55 95       	asr	r21
    178c:	47 95       	ror	r20
    178e:	8a 95       	dec	r24
    1790:	e2 f7       	brpl	.-8      	; 0x178a <GPIO_readPin+0xa8>
    1792:	ca 01       	movw	r24, r20
    1794:	81 70       	andi	r24, 0x01	; 1
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	88 23       	and	r24, r24
    179a:	19 f0       	breq	.+6      	; 0x17a2 <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH;
    179c:	51 e0       	ldi	r21, 0x01	; 1
    179e:	5b 83       	std	Y+3, r21	; 0x03
    17a0:	33 c0       	rjmp	.+102    	; 0x1808 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    17a2:	1b 82       	std	Y+3, r1	; 0x03
    17a4:	31 c0       	rjmp	.+98     	; 0x1808 <GPIO_readPin+0x126>
				}
				break;
			case PORTC_ID:
				if(BIT_IS_SET(PINC,pin_num))
    17a6:	e3 e3       	ldi	r30, 0x33	; 51
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a9 01       	movw	r20, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <GPIO_readPin+0xdc>
    17ba:	55 95       	asr	r21
    17bc:	47 95       	ror	r20
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <GPIO_readPin+0xd8>
    17c2:	ca 01       	movw	r24, r20
    17c4:	81 70       	andi	r24, 0x01	; 1
    17c6:	90 70       	andi	r25, 0x00	; 0
    17c8:	88 23       	and	r24, r24
    17ca:	19 f0       	breq	.+6      	; 0x17d2 <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH;
    17cc:	51 e0       	ldi	r21, 0x01	; 1
    17ce:	5b 83       	std	Y+3, r21	; 0x03
    17d0:	1b c0       	rjmp	.+54     	; 0x1808 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    17d2:	1b 82       	std	Y+3, r1	; 0x03
    17d4:	19 c0       	rjmp	.+50     	; 0x1808 <GPIO_readPin+0x126>
				}
				break;
			case PORTD_ID:
				if(BIT_IS_SET(PIND,pin_num))
    17d6:	e0 e3       	ldi	r30, 0x30	; 48
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <GPIO_readPin+0x10c>
    17ea:	55 95       	asr	r21
    17ec:	47 95       	ror	r20
    17ee:	8a 95       	dec	r24
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <GPIO_readPin+0x108>
    17f2:	ca 01       	movw	r24, r20
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	90 70       	andi	r25, 0x00	; 0
    17f8:	88 23       	and	r24, r24
    17fa:	19 f0       	breq	.+6      	; 0x1802 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH;
    17fc:	51 e0       	ldi	r21, 0x01	; 1
    17fe:	5b 83       	std	Y+3, r21	; 0x03
    1800:	03 c0       	rjmp	.+6      	; 0x1808 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW;
    1802:	1b 82       	std	Y+3, r1	; 0x03
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <GPIO_readPin+0x126>
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_readPin+0x12a>
				}
				break;
		}
	}
}
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	8e 83       	std	Y+6, r24	; 0x06
    180c:	8e 81       	ldd	r24, Y+6	; 0x06
    180e:	26 96       	adiw	r28, 0x06	; 6
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	00 d0       	rcall	.+0      	; 0x1826 <GPIO_setupPortDirection+0x6>
    1826:	00 d0       	rcall	.+0      	; 0x1828 <GPIO_setupPortDirection+0x8>
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	84 30       	cpi	r24, 0x04	; 4
    1834:	90 f5       	brcc	.+100    	; 0x189a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3c 83       	std	Y+4, r19	; 0x04
    183e:	2b 83       	std	Y+3, r18	; 0x03
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	91 05       	cpc	r25, r1
    1848:	d1 f0       	breq	.+52     	; 0x187e <GPIO_setupPortDirection+0x5e>
    184a:	2b 81       	ldd	r18, Y+3	; 0x03
    184c:	3c 81       	ldd	r19, Y+4	; 0x04
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	2c f4       	brge	.+10     	; 0x185e <GPIO_setupPortDirection+0x3e>
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	61 f0       	breq	.+24     	; 0x1874 <GPIO_setupPortDirection+0x54>
    185c:	1e c0       	rjmp	.+60     	; 0x189a <GPIO_setupPortDirection+0x7a>
    185e:	2b 81       	ldd	r18, Y+3	; 0x03
    1860:	3c 81       	ldd	r19, Y+4	; 0x04
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	81 f0       	breq	.+32     	; 0x1888 <GPIO_setupPortDirection+0x68>
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	91 05       	cpc	r25, r1
    1870:	81 f0       	breq	.+32     	; 0x1892 <GPIO_setupPortDirection+0x72>
    1872:	13 c0       	rjmp	.+38     	; 0x189a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1874:	ea e3       	ldi	r30, 0x3A	; 58
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	80 83       	st	Z, r24
    187c:	0e c0       	rjmp	.+28     	; 0x189a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    187e:	e7 e3       	ldi	r30, 0x37	; 55
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	80 83       	st	Z, r24
    1886:	09 c0       	rjmp	.+18     	; 0x189a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1888:	e4 e3       	ldi	r30, 0x34	; 52
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	80 83       	st	Z, r24
    1890:	04 c0       	rjmp	.+8      	; 0x189a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1892:	e1 e3       	ldi	r30, 0x31	; 49
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	80 83       	st	Z, r24
			break;
		}
	}
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <GPIO_writePort+0x6>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <GPIO_writePort+0x8>
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	90 f5       	brcc	.+100    	; 0x1922 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port value as required */
		switch(port_num)
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	3c 83       	std	Y+4, r19	; 0x04
    18c6:	2b 83       	std	Y+3, r18	; 0x03
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	91 05       	cpc	r25, r1
    18d0:	d1 f0       	breq	.+52     	; 0x1906 <GPIO_writePort+0x5e>
    18d2:	2b 81       	ldd	r18, Y+3	; 0x03
    18d4:	3c 81       	ldd	r19, Y+4	; 0x04
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	2c f4       	brge	.+10     	; 0x18e6 <GPIO_writePort+0x3e>
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	61 f0       	breq	.+24     	; 0x18fc <GPIO_writePort+0x54>
    18e4:	1e c0       	rjmp	.+60     	; 0x1922 <GPIO_writePort+0x7a>
    18e6:	2b 81       	ldd	r18, Y+3	; 0x03
    18e8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ea:	22 30       	cpi	r18, 0x02	; 2
    18ec:	31 05       	cpc	r19, r1
    18ee:	81 f0       	breq	.+32     	; 0x1910 <GPIO_writePort+0x68>
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	91 05       	cpc	r25, r1
    18f8:	81 f0       	breq	.+32     	; 0x191a <GPIO_writePort+0x72>
    18fa:	13 c0       	rjmp	.+38     	; 0x1922 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18fc:	eb e3       	ldi	r30, 0x3B	; 59
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	80 83       	st	Z, r24
    1904:	0e c0       	rjmp	.+28     	; 0x1922 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1906:	e8 e3       	ldi	r30, 0x38	; 56
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	80 83       	st	Z, r24
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1910:	e5 e3       	ldi	r30, 0x35	; 53
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	80 83       	st	Z, r24
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    191a:	e2 e3       	ldi	r30, 0x32	; 50
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	80 83       	st	Z, r24
			break;
		}
	}
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <GPIO_readPort+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <GPIO_readPort+0x8>
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	98 f5       	brcc	.+102    	; 0x19ac <GPIO_readPort+0x7c>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port value as required */
		switch(port_num)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	3c 83       	std	Y+4, r19	; 0x04
    194e:	2b 83       	std	Y+3, r18	; 0x03
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	91 05       	cpc	r25, r1
    1958:	d1 f0       	breq	.+52     	; 0x198e <GPIO_readPort+0x5e>
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	3c 81       	ldd	r19, Y+4	; 0x04
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	2c f4       	brge	.+10     	; 0x196e <GPIO_readPort+0x3e>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	61 f0       	breq	.+24     	; 0x1984 <GPIO_readPort+0x54>
    196c:	1f c0       	rjmp	.+62     	; 0x19ac <GPIO_readPort+0x7c>
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	81 f0       	breq	.+32     	; 0x1998 <GPIO_readPort+0x68>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	81 f0       	breq	.+32     	; 0x19a2 <GPIO_readPort+0x72>
    1982:	14 c0       	rjmp	.+40     	; 0x19ac <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			return PINA;
    1984:	e9 e3       	ldi	r30, 0x39	; 57
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	90 81       	ld	r25, Z
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	10 c0       	rjmp	.+32     	; 0x19ae <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			return PINB;
    198e:	e6 e3       	ldi	r30, 0x36	; 54
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	20 81       	ld	r18, Z
    1994:	2a 83       	std	Y+2, r18	; 0x02
    1996:	0b c0       	rjmp	.+22     	; 0x19ae <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			return PINC;
    1998:	e3 e3       	ldi	r30, 0x33	; 51
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	30 81       	ld	r19, Z
    199e:	3a 83       	std	Y+2, r19	; 0x02
    19a0:	06 c0       	rjmp	.+12     	; 0x19ae <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			return PIND;
    19a2:	e0 e3       	ldi	r30, 0x30	; 48
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8a 83       	std	Y+2, r24	; 0x02
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <GPIO_readPort+0x7e>
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <GPIO_readPort+0x82>
			break;
		}
	}
}
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	9d 83       	std	Y+5, r25	; 0x05
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <PIRSensor_init>:
/*
 * Description :
 * Initializes the pir sensor pin direction.
*/
void PIRSensor_init(void)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	//Initializes the pir sensor pin direction
	GPIO_setupPinDirection(PIR_DATA_PORT_ID,PIR_DATA_PIN_ID,PIN_INPUT);
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	62 e0       	ldi	r22, 0x02	; 2
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	0e 94 9b 09 	call	0x1336	; 0x1336 <GPIO_setupPinDirection>
}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <PIR_getState>:
/*
 * Description :
 * Reads the value from the pir sensor and returns it.
*/
uint8 PIR_getState(void)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_DATA_PORT_ID,PIR_DATA_PIN_ID);
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <GPIO_readPin>
}
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <PWM_Timer0_Start>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void PWM_Timer0_Start(uint8 duty_cycle)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	0f 92       	push	r0
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	89 83       	std	Y+1, r24	; 0x01
	// initialize fast pwm mode
	SET_BIT(TCCR0, WGM00);
    19fe:	a3 e5       	ldi	r26, 0x53	; 83
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e3 e5       	ldi	r30, 0x53	; 83
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	80 64       	ori	r24, 0x40	; 64
    1a0a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1a0c:	a3 e5       	ldi	r26, 0x53	; 83
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e3 e5       	ldi	r30, 0x53	; 83
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	88 60       	ori	r24, 0x08	; 8
    1a18:	8c 93       	st	X, r24
	//Set prescaler for 64
	SET_BIT(TCCR0, CS00);
    1a1a:	a3 e5       	ldi	r26, 0x53	; 83
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e3 e5       	ldi	r30, 0x53	; 83
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	81 60       	ori	r24, 0x01	; 1
    1a26:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    1a28:	a3 e5       	ldi	r26, 0x53	; 83
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e3 e5       	ldi	r30, 0x53	; 83
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	82 60       	ori	r24, 0x02	; 2
    1a34:	8c 93       	st	X, r24
	//Non-inverting mode
	SET_BIT(TCCR0, COM01);
    1a36:	a3 e5       	ldi	r26, 0x53	; 83
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e3 e5       	ldi	r30, 0x53	; 83
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	80 62       	ori	r24, 0x20	; 32
    1a42:	8c 93       	st	X, r24
	//Set the duty cycle
	OCR0= duty_cycle;
    1a44:	ec e5       	ldi	r30, 0x5C	; 92
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	80 83       	st	Z, r24
}
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1a54:	1f 92       	push	r1
    1a56:	0f 92       	push	r0
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	0f 92       	push	r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	2f 93       	push	r18
    1a60:	3f 93       	push	r19
    1a62:	4f 93       	push	r20
    1a64:	5f 93       	push	r21
    1a66:	6f 93       	push	r22
    1a68:	7f 93       	push	r23
    1a6a:	8f 93       	push	r24
    1a6c:	9f 93       	push	r25
    1a6e:	af 93       	push	r26
    1a70:	bf 93       	push	r27
    1a72:	ef 93       	push	r30
    1a74:	ff 93       	push	r31
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_callBackPtr != NULL_PTR)
    1a7e:	80 91 80 00 	lds	r24, 0x0080
    1a82:	90 91 81 00 	lds	r25, 0x0081
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	29 f0       	breq	.+10     	; 0x1a94 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a8a:	e0 91 80 00 	lds	r30, 0x0080
    1a8e:	f0 91 81 00 	lds	r31, 0x0081
    1a92:	09 95       	icall
	}
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	7f 91       	pop	r23
    1aa6:	6f 91       	pop	r22
    1aa8:	5f 91       	pop	r21
    1aaa:	4f 91       	pop	r20
    1aac:	3f 91       	pop	r19
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <__vector_10>:
ISR(TIMER0_COMP_vect)
{
    1aba:	1f 92       	push	r1
    1abc:	0f 92       	push	r0
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	0f 92       	push	r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	2f 93       	push	r18
    1ac6:	3f 93       	push	r19
    1ac8:	4f 93       	push	r20
    1aca:	5f 93       	push	r21
    1acc:	6f 93       	push	r22
    1ace:	7f 93       	push	r23
    1ad0:	8f 93       	push	r24
    1ad2:	9f 93       	push	r25
    1ad4:	af 93       	push	r26
    1ad6:	bf 93       	push	r27
    1ad8:	ef 93       	push	r30
    1ada:	ff 93       	push	r31
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_callBackPtr != NULL_PTR)
    1ae4:	80 91 80 00 	lds	r24, 0x0080
    1ae8:	90 91 81 00 	lds	r25, 0x0081
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	29 f0       	breq	.+10     	; 0x1afa <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1af0:	e0 91 80 00 	lds	r30, 0x0080
    1af4:	f0 91 81 00 	lds	r31, 0x0081
    1af8:	09 95       	icall
	}
}
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	ff 91       	pop	r31
    1b00:	ef 91       	pop	r30
    1b02:	bf 91       	pop	r27
    1b04:	af 91       	pop	r26
    1b06:	9f 91       	pop	r25
    1b08:	8f 91       	pop	r24
    1b0a:	7f 91       	pop	r23
    1b0c:	6f 91       	pop	r22
    1b0e:	5f 91       	pop	r21
    1b10:	4f 91       	pop	r20
    1b12:	3f 91       	pop	r19
    1b14:	2f 91       	pop	r18
    1b16:	0f 90       	pop	r0
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	0f 90       	pop	r0
    1b1c:	1f 90       	pop	r1
    1b1e:	18 95       	reti

00001b20 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1b20:	1f 92       	push	r1
    1b22:	0f 92       	push	r0
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	0f 92       	push	r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	2f 93       	push	r18
    1b2c:	3f 93       	push	r19
    1b2e:	4f 93       	push	r20
    1b30:	5f 93       	push	r21
    1b32:	6f 93       	push	r22
    1b34:	7f 93       	push	r23
    1b36:	8f 93       	push	r24
    1b38:	9f 93       	push	r25
    1b3a:	af 93       	push	r26
    1b3c:	bf 93       	push	r27
    1b3e:	ef 93       	push	r30
    1b40:	ff 93       	push	r31
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_callBackPtr != NULL_PTR)
    1b4a:	80 91 84 00 	lds	r24, 0x0084
    1b4e:	90 91 85 00 	lds	r25, 0x0085
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	29 f0       	breq	.+10     	; 0x1b60 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b56:	e0 91 84 00 	lds	r30, 0x0084
    1b5a:	f0 91 85 00 	lds	r31, 0x0085
    1b5e:	09 95       	icall
	}
}
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	ff 91       	pop	r31
    1b66:	ef 91       	pop	r30
    1b68:	bf 91       	pop	r27
    1b6a:	af 91       	pop	r26
    1b6c:	9f 91       	pop	r25
    1b6e:	8f 91       	pop	r24
    1b70:	7f 91       	pop	r23
    1b72:	6f 91       	pop	r22
    1b74:	5f 91       	pop	r21
    1b76:	4f 91       	pop	r20
    1b78:	3f 91       	pop	r19
    1b7a:	2f 91       	pop	r18
    1b7c:	0f 90       	pop	r0
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	0f 90       	pop	r0
    1b82:	1f 90       	pop	r1
    1b84:	18 95       	reti

00001b86 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
    1b86:	1f 92       	push	r1
    1b88:	0f 92       	push	r0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	0f 92       	push	r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	2f 93       	push	r18
    1b92:	3f 93       	push	r19
    1b94:	4f 93       	push	r20
    1b96:	5f 93       	push	r21
    1b98:	6f 93       	push	r22
    1b9a:	7f 93       	push	r23
    1b9c:	8f 93       	push	r24
    1b9e:	9f 93       	push	r25
    1ba0:	af 93       	push	r26
    1ba2:	bf 93       	push	r27
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
	if(Timer2_callBackPtr != NULL_PTR)
    1bb0:	80 91 84 00 	lds	r24, 0x0084
    1bb4:	90 91 85 00 	lds	r25, 0x0085
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	29 f0       	breq	.+10     	; 0x1bc6 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1bbc:	e0 91 84 00 	lds	r30, 0x0084
    1bc0:	f0 91 85 00 	lds	r31, 0x0085
    1bc4:	09 95       	icall
	}
}
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	ff 91       	pop	r31
    1bcc:	ef 91       	pop	r30
    1bce:	bf 91       	pop	r27
    1bd0:	af 91       	pop	r26
    1bd2:	9f 91       	pop	r25
    1bd4:	8f 91       	pop	r24
    1bd6:	7f 91       	pop	r23
    1bd8:	6f 91       	pop	r22
    1bda:	5f 91       	pop	r21
    1bdc:	4f 91       	pop	r20
    1bde:	3f 91       	pop	r19
    1be0:	2f 91       	pop	r18
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	0f 90       	pop	r0
    1be8:	1f 90       	pop	r1
    1bea:	18 95       	reti

00001bec <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1bec:	1f 92       	push	r1
    1bee:	0f 92       	push	r0
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	0f 92       	push	r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	2f 93       	push	r18
    1bf8:	3f 93       	push	r19
    1bfa:	4f 93       	push	r20
    1bfc:	5f 93       	push	r21
    1bfe:	6f 93       	push	r22
    1c00:	7f 93       	push	r23
    1c02:	8f 93       	push	r24
    1c04:	9f 93       	push	r25
    1c06:	af 93       	push	r26
    1c08:	bf 93       	push	r27
    1c0a:	ef 93       	push	r30
    1c0c:	ff 93       	push	r31
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_callBackPtr != NULL_PTR)
    1c16:	80 91 82 00 	lds	r24, 0x0082
    1c1a:	90 91 83 00 	lds	r25, 0x0083
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	29 f0       	breq	.+10     	; 0x1c2c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1c22:	e0 91 82 00 	lds	r30, 0x0082
    1c26:	f0 91 83 00 	lds	r31, 0x0083
    1c2a:	09 95       	icall
	}
}
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	ff 91       	pop	r31
    1c32:	ef 91       	pop	r30
    1c34:	bf 91       	pop	r27
    1c36:	af 91       	pop	r26
    1c38:	9f 91       	pop	r25
    1c3a:	8f 91       	pop	r24
    1c3c:	7f 91       	pop	r23
    1c3e:	6f 91       	pop	r22
    1c40:	5f 91       	pop	r21
    1c42:	4f 91       	pop	r20
    1c44:	3f 91       	pop	r19
    1c46:	2f 91       	pop	r18
    1c48:	0f 90       	pop	r0
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	0f 90       	pop	r0
    1c4e:	1f 90       	pop	r1
    1c50:	18 95       	reti

00001c52 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    1c52:	1f 92       	push	r1
    1c54:	0f 92       	push	r0
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	0f 92       	push	r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	2f 93       	push	r18
    1c5e:	3f 93       	push	r19
    1c60:	4f 93       	push	r20
    1c62:	5f 93       	push	r21
    1c64:	6f 93       	push	r22
    1c66:	7f 93       	push	r23
    1c68:	8f 93       	push	r24
    1c6a:	9f 93       	push	r25
    1c6c:	af 93       	push	r26
    1c6e:	bf 93       	push	r27
    1c70:	ef 93       	push	r30
    1c72:	ff 93       	push	r31
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_callBackPtr != NULL_PTR)
    1c7c:	80 91 82 00 	lds	r24, 0x0082
    1c80:	90 91 83 00 	lds	r25, 0x0083
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	29 f0       	breq	.+10     	; 0x1c92 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1c88:	e0 91 82 00 	lds	r30, 0x0082
    1c8c:	f0 91 83 00 	lds	r31, 0x0083
    1c90:	09 95       	icall
	}
}
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	ff 91       	pop	r31
    1c98:	ef 91       	pop	r30
    1c9a:	bf 91       	pop	r27
    1c9c:	af 91       	pop	r26
    1c9e:	9f 91       	pop	r25
    1ca0:	8f 91       	pop	r24
    1ca2:	7f 91       	pop	r23
    1ca4:	6f 91       	pop	r22
    1ca6:	5f 91       	pop	r21
    1ca8:	4f 91       	pop	r20
    1caa:	3f 91       	pop	r19
    1cac:	2f 91       	pop	r18
    1cae:	0f 90       	pop	r0
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	0f 90       	pop	r0
    1cb4:	1f 90       	pop	r1
    1cb6:	18 95       	reti

00001cb8 <Timer_init>:
/*
 * Description :
 *  Function to initialize the Timer driver
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	60 97       	sbiw	r28, 0x10	; 16
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    1cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd4:	84 81       	ldd	r24, Z+4	; 0x04
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	38 8b       	std	Y+16, r19	; 0x10
    1cdc:	2f 87       	std	Y+15, r18	; 0x0f
    1cde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce0:	98 89       	ldd	r25, Y+16	; 0x10
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <Timer_init+0x32>
    1ce8:	68 c0       	rjmp	.+208    	; 0x1dba <Timer_init+0x102>
    1cea:	2f 85       	ldd	r18, Y+15	; 0x0f
    1cec:	38 89       	ldd	r19, Y+16	; 0x10
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <Timer_init+0x3e>
    1cf4:	cc c0       	rjmp	.+408    	; 0x1e8e <Timer_init+0x1d6>
    1cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf8:	98 89       	ldd	r25, Y+16	; 0x10
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <Timer_init+0x48>
    1cfe:	23 c1       	rjmp	.+582    	; 0x1f46 <Timer_init+0x28e>
	{
		case 0:
			//clear all the register to be ready for configuration
			//Set pin FOC0 as we will not use pwm mode
			TCCR0 = (1<<FOC0);
    1d00:	e3 e5       	ldi	r30, 0x53	; 83
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 e8       	ldi	r24, 0x80	; 128
    1d06:	80 83       	st	Z, r24
			//Choose the mode
			switch(Config_Ptr->timer_mode)
    1d08:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0c:	86 81       	ldd	r24, Z+6	; 0x06
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3e 87       	std	Y+14, r19	; 0x0e
    1d14:	2d 87       	std	Y+13, r18	; 0x0d
    1d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	61 f0       	breq	.+24     	; 0x1d36 <Timer_init+0x7e>
    1d1e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d20:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d22:	21 30       	cpi	r18, 0x01	; 1
    1d24:	31 05       	cpc	r19, r1
    1d26:	39 f4       	brne	.+14     	; 0x1d36 <Timer_init+0x7e>
			{
				case 0:
					break;
				case 1:
					TCCR0 |= (1<<WGM01);
    1d28:	a3 e5       	ldi	r26, 0x53	; 83
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e3 e5       	ldi	r30, 0x53	; 83
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	88 60       	ori	r24, 0x08	; 8
    1d34:	8c 93       	st	X, r24
					break;
			}
			//Set the clock
			TCCR0 = (TCCR0 & 0xF8) | Config_Ptr->timer_clock;
    1d36:	a3 e5       	ldi	r26, 0x53	; 83
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	e3 e5       	ldi	r30, 0x53	; 83
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	98 2f       	mov	r25, r24
    1d42:	98 7f       	andi	r25, 0xF8	; 248
    1d44:	e9 81       	ldd	r30, Y+1	; 0x01
    1d46:	fa 81       	ldd	r31, Y+2	; 0x02
    1d48:	85 81       	ldd	r24, Z+5	; 0x05
    1d4a:	89 2b       	or	r24, r25
    1d4c:	8c 93       	st	X, r24
			//Set initial counter
			TCNT0 = (Config_Ptr->timer_InitialValue & 0x00FF);
    1d4e:	a2 e5       	ldi	r26, 0x52	; 82
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e9 81       	ldd	r30, Y+1	; 0x01
    1d54:	fa 81       	ldd	r31, Y+2	; 0x02
    1d56:	80 81       	ld	r24, Z
    1d58:	91 81       	ldd	r25, Z+1	; 0x01
    1d5a:	8c 93       	st	X, r24
			//Set Compare register
			OCR0 = (Config_Ptr->timer_compare_MatchValue & 0x00FF);
    1d5c:	ac e5       	ldi	r26, 0x5C	; 92
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e9 81       	ldd	r30, Y+1	; 0x01
    1d62:	fa 81       	ldd	r31, Y+2	; 0x02
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	8c 93       	st	X, r24
			//Enable interrupt
			TIMSK &= ~(1<< TOIE0) & ~(1<< OCIE0);
    1d6a:	a9 e5       	ldi	r26, 0x59	; 89
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e9 e5       	ldi	r30, 0x59	; 89
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	8c 7f       	andi	r24, 0xFC	; 252
    1d76:	8c 93       	st	X, r24
			switch(Config_Ptr->timer_mode)
    1d78:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d7c:	86 81       	ldd	r24, Z+6	; 0x06
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	3c 87       	std	Y+12, r19	; 0x0c
    1d84:	2b 87       	std	Y+11, r18	; 0x0b
    1d86:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d88:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	31 f0       	breq	.+12     	; 0x1d9a <Timer_init+0xe2>
    1d8e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1d90:	3c 85       	ldd	r19, Y+12	; 0x0c
    1d92:	21 30       	cpi	r18, 0x01	; 1
    1d94:	31 05       	cpc	r19, r1
    1d96:	49 f0       	breq	.+18     	; 0x1daa <Timer_init+0xf2>
    1d98:	d6 c0       	rjmp	.+428    	; 0x1f46 <Timer_init+0x28e>
			{
				case 0:
					TIMSK |= (1<< TOIE0);
    1d9a:	a9 e5       	ldi	r26, 0x59	; 89
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e9 e5       	ldi	r30, 0x59	; 89
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	81 60       	ori	r24, 0x01	; 1
    1da6:	8c 93       	st	X, r24
    1da8:	ce c0       	rjmp	.+412    	; 0x1f46 <Timer_init+0x28e>
					break;
				case 1:
					TIMSK |= (1<< OCIE0);
    1daa:	a9 e5       	ldi	r26, 0x59	; 89
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e9 e5       	ldi	r30, 0x59	; 89
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	82 60       	ori	r24, 0x02	; 2
    1db6:	8c 93       	st	X, r24
    1db8:	c6 c0       	rjmp	.+396    	; 0x1f46 <Timer_init+0x28e>
			break;

		case 1:
			//clear all the register to be ready for configuration
			//Set pin FOC1A & FOC1B as we will not use pwm mode
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1dba:	ef e4       	ldi	r30, 0x4F	; 79
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	8c e0       	ldi	r24, 0x0C	; 12
    1dc0:	80 83       	st	Z, r24
			//Choose the mode
			switch(Config_Ptr->timer_mode)
    1dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc6:	86 81       	ldd	r24, Z+6	; 0x06
    1dc8:	28 2f       	mov	r18, r24
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	3a 87       	std	Y+10, r19	; 0x0a
    1dce:	29 87       	std	Y+9, r18	; 0x09
    1dd0:	89 85       	ldd	r24, Y+9	; 0x09
    1dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	31 f0       	breq	.+12     	; 0x1de4 <Timer_init+0x12c>
    1dd8:	29 85       	ldd	r18, Y+9	; 0x09
    1dda:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ddc:	21 30       	cpi	r18, 0x01	; 1
    1dde:	31 05       	cpc	r19, r1
    1de0:	49 f0       	breq	.+18     	; 0x1df4 <Timer_init+0x13c>
    1de2:	0f c0       	rjmp	.+30     	; 0x1e02 <Timer_init+0x14a>
			{
				case 0:
					TCCR1B &= ~(1<<WGM12);
    1de4:	ae e4       	ldi	r26, 0x4E	; 78
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	ee e4       	ldi	r30, 0x4E	; 78
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	87 7f       	andi	r24, 0xF7	; 247
    1df0:	8c 93       	st	X, r24
    1df2:	07 c0       	rjmp	.+14     	; 0x1e02 <Timer_init+0x14a>
					break;
				case 1:
					TCCR1B |= (1<<WGM12);
    1df4:	ae e4       	ldi	r26, 0x4E	; 78
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	ee e4       	ldi	r30, 0x4E	; 78
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	88 60       	ori	r24, 0x08	; 8
    1e00:	8c 93       	st	X, r24
					break;
			}
			//Set the clock
			TCCR1B = (TCCR1B & 0xF8) | Config_Ptr->timer_clock;
    1e02:	ae e4       	ldi	r26, 0x4E	; 78
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	ee e4       	ldi	r30, 0x4E	; 78
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	98 7f       	andi	r25, 0xF8	; 248
    1e10:	e9 81       	ldd	r30, Y+1	; 0x01
    1e12:	fa 81       	ldd	r31, Y+2	; 0x02
    1e14:	85 81       	ldd	r24, Z+5	; 0x05
    1e16:	89 2b       	or	r24, r25
    1e18:	8c 93       	st	X, r24
			//Set initial counter
			TCNT1 = Config_Ptr->timer_InitialValue;
    1e1a:	ac e4       	ldi	r26, 0x4C	; 76
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e20:	fa 81       	ldd	r31, Y+2	; 0x02
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	11 96       	adiw	r26, 0x01	; 1
    1e28:	9c 93       	st	X, r25
    1e2a:	8e 93       	st	-X, r24
			//Set Compare register
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    1e2c:	aa e4       	ldi	r26, 0x4A	; 74
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e9 81       	ldd	r30, Y+1	; 0x01
    1e32:	fa 81       	ldd	r31, Y+2	; 0x02
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	11 96       	adiw	r26, 0x01	; 1
    1e3a:	9c 93       	st	X, r25
    1e3c:	8e 93       	st	-X, r24
			//Enable interrupt
			TIMSK &= ~(1<< TOIE1) & ~(1<< OCIE1A);
    1e3e:	a9 e5       	ldi	r26, 0x59	; 89
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e9 e5       	ldi	r30, 0x59	; 89
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8b 7e       	andi	r24, 0xEB	; 235
    1e4a:	8c 93       	st	X, r24
			switch(Config_Ptr->timer_mode)
    1e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e50:	86 81       	ldd	r24, Z+6	; 0x06
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	38 87       	std	Y+8, r19	; 0x08
    1e58:	2f 83       	std	Y+7, r18	; 0x07
    1e5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5c:	98 85       	ldd	r25, Y+8	; 0x08
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	31 f0       	breq	.+12     	; 0x1e6e <Timer_init+0x1b6>
    1e62:	2f 81       	ldd	r18, Y+7	; 0x07
    1e64:	38 85       	ldd	r19, Y+8	; 0x08
    1e66:	21 30       	cpi	r18, 0x01	; 1
    1e68:	31 05       	cpc	r19, r1
    1e6a:	49 f0       	breq	.+18     	; 0x1e7e <Timer_init+0x1c6>
    1e6c:	6c c0       	rjmp	.+216    	; 0x1f46 <Timer_init+0x28e>
			{
				case 0:
					TIMSK |= (1<< TOIE1);
    1e6e:	a9 e5       	ldi	r26, 0x59	; 89
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e9 e5       	ldi	r30, 0x59	; 89
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	84 60       	ori	r24, 0x04	; 4
    1e7a:	8c 93       	st	X, r24
    1e7c:	64 c0       	rjmp	.+200    	; 0x1f46 <Timer_init+0x28e>
					break;
				case 1:
					TIMSK |= (1<< OCIE1A);
    1e7e:	a9 e5       	ldi	r26, 0x59	; 89
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e9 e5       	ldi	r30, 0x59	; 89
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	80 61       	ori	r24, 0x10	; 16
    1e8a:	8c 93       	st	X, r24
    1e8c:	5c c0       	rjmp	.+184    	; 0x1f46 <Timer_init+0x28e>
			break;

		case 2:
			//clear all the register to be ready for configuration
			//Set pin FOC2 as we will not use pwm mode
			TCCR2 = (1<<FOC2);
    1e8e:	e5 e4       	ldi	r30, 0x45	; 69
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 e8       	ldi	r24, 0x80	; 128
    1e94:	80 83       	st	Z, r24
			//Choose the mode
			switch(Config_Ptr->timer_mode)
    1e96:	e9 81       	ldd	r30, Y+1	; 0x01
    1e98:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9a:	86 81       	ldd	r24, Z+6	; 0x06
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	3e 83       	std	Y+6, r19	; 0x06
    1ea2:	2d 83       	std	Y+5, r18	; 0x05
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	61 f0       	breq	.+24     	; 0x1ec4 <Timer_init+0x20c>
    1eac:	2d 81       	ldd	r18, Y+5	; 0x05
    1eae:	3e 81       	ldd	r19, Y+6	; 0x06
    1eb0:	21 30       	cpi	r18, 0x01	; 1
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	39 f4       	brne	.+14     	; 0x1ec4 <Timer_init+0x20c>
			{
				case 0:
					break;
				case 1:
					TCCR2 |= (1<<WGM21);
    1eb6:	a5 e4       	ldi	r26, 0x45	; 69
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e5 e4       	ldi	r30, 0x45	; 69
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	88 60       	ori	r24, 0x08	; 8
    1ec2:	8c 93       	st	X, r24
					break;
			}
			//Set the clock
			TCCR2 = (TCCR2 & 0xF8) | Config_Ptr->timer_clock;
    1ec4:	a5 e4       	ldi	r26, 0x45	; 69
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e5 e4       	ldi	r30, 0x45	; 69
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	98 2f       	mov	r25, r24
    1ed0:	98 7f       	andi	r25, 0xF8	; 248
    1ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed6:	85 81       	ldd	r24, Z+5	; 0x05
    1ed8:	89 2b       	or	r24, r25
    1eda:	8c 93       	st	X, r24
			//Set initial counter
			TCNT2 = (Config_Ptr->timer_InitialValue & 0x00FF);
    1edc:	a4 e4       	ldi	r26, 0x44	; 68
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	8c 93       	st	X, r24
			//Set Compare register
			OCR2 = (Config_Ptr->timer_compare_MatchValue & 0x00FF);
    1eea:	a3 e4       	ldi	r26, 0x43	; 67
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	8c 93       	st	X, r24
			//Enable interrupt
			TIMSK &= ~(1<< TOIE2) & ~(1<< OCIE2);
    1ef8:	a9 e5       	ldi	r26, 0x59	; 89
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e9 e5       	ldi	r30, 0x59	; 89
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	8f 73       	andi	r24, 0x3F	; 63
    1f04:	8c 93       	st	X, r24
			switch(Config_Ptr->timer_mode)
    1f06:	e9 81       	ldd	r30, Y+1	; 0x01
    1f08:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0a:	86 81       	ldd	r24, Z+6	; 0x06
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3c 83       	std	Y+4, r19	; 0x04
    1f12:	2b 83       	std	Y+3, r18	; 0x03
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	31 f0       	breq	.+12     	; 0x1f28 <Timer_init+0x270>
    1f1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f20:	21 30       	cpi	r18, 0x01	; 1
    1f22:	31 05       	cpc	r19, r1
    1f24:	49 f0       	breq	.+18     	; 0x1f38 <Timer_init+0x280>
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <Timer_init+0x28e>
			{
				case 0:
					TIMSK |= (1<< TOIE2);
    1f28:	a9 e5       	ldi	r26, 0x59	; 89
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e9 e5       	ldi	r30, 0x59	; 89
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	80 64       	ori	r24, 0x40	; 64
    1f34:	8c 93       	st	X, r24
    1f36:	07 c0       	rjmp	.+14     	; 0x1f46 <Timer_init+0x28e>
					break;
				case 1:
					TIMSK |= (1<< OCIE2);
    1f38:	a9 e5       	ldi	r26, 0x59	; 89
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e9 e5       	ldi	r30, 0x59	; 89
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	80 68       	ori	r24, 0x80	; 128
    1f44:	8c 93       	st	X, r24
					break;
			}
			break;
	}
}
    1f46:	60 96       	adiw	r28, 0x10	; 16
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <Timer_deInit>:
/*
 * Description :
 *  Function to disable the Timer via Timer_ID.
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <Timer_deInit+0x6>
    1f5e:	0f 92       	push	r0
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	3b 83       	std	Y+3, r19	; 0x03
    1f6e:	2a 83       	std	Y+2, r18	; 0x02
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	9b 81       	ldd	r25, Y+3	; 0x03
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	91 05       	cpc	r25, r1
    1f78:	89 f0       	breq	.+34     	; 0x1f9c <Timer_deInit+0x44>
    1f7a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f7c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f7e:	22 30       	cpi	r18, 0x02	; 2
    1f80:	31 05       	cpc	r19, r1
    1f82:	a1 f0       	breq	.+40     	; 0x1fac <Timer_deInit+0x54>
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	b9 f4       	brne	.+46     	; 0x1fba <Timer_deInit+0x62>
	{
		case 0:
			TCCR0 = (TCCR2 & 0xF8) | NO_CLOCK;
    1f8c:	a3 e5       	ldi	r26, 0x53	; 83
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e5 e4       	ldi	r30, 0x45	; 69
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	88 7f       	andi	r24, 0xF8	; 248
    1f98:	8c 93       	st	X, r24
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <Timer_deInit+0x62>
			break;
		case 1:
			TCCR1B = (TCCR1B & 0xF8) | NO_CLOCK;
    1f9c:	ae e4       	ldi	r26, 0x4E	; 78
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	ee e4       	ldi	r30, 0x4E	; 78
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 7f       	andi	r24, 0xF8	; 248
    1fa8:	8c 93       	st	X, r24
    1faa:	07 c0       	rjmp	.+14     	; 0x1fba <Timer_deInit+0x62>
			break;
		case 2:
			TCCR2 = (TCCR2 & 0xF8) | NO_CLOCK;
    1fac:	a5 e4       	ldi	r26, 0x45	; 69
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e5 e4       	ldi	r30, 0x45	; 69
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	88 7f       	andi	r24, 0xF8	; 248
    1fb8:	8c 93       	st	X, r24
			break;
	}
}
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <Timer_setCallBack>:
/*
 * Description :
 *  Function to set the Call Back function address to the required Timer.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <Timer_setCallBack+0x6>
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <Timer_setCallBack+0x8>
    1fce:	0f 92       	push	r0
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	9a 83       	std	Y+2, r25	; 0x02
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timer_ID)
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	3d 83       	std	Y+5, r19	; 0x05
    1fe2:	2c 83       	std	Y+4, r18	; 0x04
    1fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	91 05       	cpc	r25, r1
    1fec:	81 f0       	breq	.+32     	; 0x200e <Timer_setCallBack+0x48>
    1fee:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff2:	22 30       	cpi	r18, 0x02	; 2
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	91 f0       	breq	.+36     	; 0x201c <Timer_setCallBack+0x56>
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	a1 f4       	brne	.+40     	; 0x2028 <Timer_setCallBack+0x62>
	{
		case 0:
			Timer0_callBackPtr = a_ptr;
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	90 93 81 00 	sts	0x0081, r25
    2008:	80 93 80 00 	sts	0x0080, r24
    200c:	0d c0       	rjmp	.+26     	; 0x2028 <Timer_setCallBack+0x62>
			break;
		case 1:
			Timer1_callBackPtr = a_ptr;
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	90 93 83 00 	sts	0x0083, r25
    2016:	80 93 82 00 	sts	0x0082, r24
    201a:	06 c0       	rjmp	.+12     	; 0x2028 <Timer_setCallBack+0x62>
			break;
		case 2:
			Timer2_callBackPtr = a_ptr;
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	9a 81       	ldd	r25, Y+2	; 0x02
    2020:	90 93 85 00 	sts	0x0085, r25
    2024:	80 93 84 00 	sts	0x0084, r24
			break;
	}
}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType* Config_Ptr)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <TWI_init+0x6>
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	9a 83       	std	Y+2, r25	; 0x02
    2044:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    2046:	a0 e2       	ldi	r26, 0x20	; 32
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e9 81       	ldd	r30, Y+1	; 0x01
    204c:	fa 81       	ldd	r31, Y+2	; 0x02
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	8c 93       	st	X, r24
	TWSR = 0x00;
    2054:	e1 e2       	ldi	r30, 0x21	; 33
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    205a:	a2 e2       	ldi	r26, 0x22	; 34
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e9 81       	ldd	r30, Y+1	; 0x01
    2060:	fa 81       	ldd	r31, Y+2	; 0x02
    2062:	80 81       	ld	r24, Z
    2064:	91 81       	ldd	r25, Z+1	; 0x01
    2066:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2068:	e6 e5       	ldi	r30, 0x56	; 86
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	84 e0       	ldi	r24, 0x04	; 4
    206e:	80 83       	st	Z, r24
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <TWI_start>:

void TWI_start(void)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2082:	e6 e5       	ldi	r30, 0x56	; 86
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	84 ea       	ldi	r24, 0xA4	; 164
    2088:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    208a:	e6 e5       	ldi	r30, 0x56	; 86
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	88 23       	and	r24, r24
    2092:	dc f7       	brge	.-10     	; 0x208a <TWI_start+0x10>
}
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <TWI_stop>:

void TWI_stop(void)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    20a2:	e6 e5       	ldi	r30, 0x56	; 86
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	84 e9       	ldi	r24, 0x94	; 148
    20a8:	80 83       	st	Z, r24
}
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	0f 92       	push	r0
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    20bc:	e3 e2       	ldi	r30, 0x23	; 35
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    20c4:	e6 e5       	ldi	r30, 0x56	; 86
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	84 e8       	ldi	r24, 0x84	; 132
    20ca:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    20cc:	e6 e5       	ldi	r30, 0x56	; 86
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	88 23       	and	r24, r24
    20d4:	dc f7       	brge	.-10     	; 0x20cc <TWI_writeByte+0x1c>
}
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    20e6:	e6 e5       	ldi	r30, 0x56	; 86
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	84 ec       	ldi	r24, 0xC4	; 196
    20ec:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    20ee:	e6 e5       	ldi	r30, 0x56	; 86
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	88 23       	and	r24, r24
    20f6:	dc f7       	brge	.-10     	; 0x20ee <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    20f8:	e3 e2       	ldi	r30, 0x23	; 35
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
}
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    210c:	e6 e5       	ldi	r30, 0x56	; 86
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	84 e8       	ldi	r24, 0x84	; 132
    2112:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2114:	e6 e5       	ldi	r30, 0x56	; 86
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	88 23       	and	r24, r24
    211c:	dc f7       	brge	.-10     	; 0x2114 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    211e:	e3 e2       	ldi	r30, 0x23	; 35
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
}
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	0f 92       	push	r0
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2134:	e1 e2       	ldi	r30, 0x21	; 33
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	88 7f       	andi	r24, 0xF8	; 248
    213c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <UART_init+0x6>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <UART_init+0x8>
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2158:	1a 82       	std	Y+2, r1	; 0x02
    215a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    215c:	eb e2       	ldi	r30, 0x2B	; 43
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2164:	ea e2       	ldi	r30, 0x2A	; 42
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	88 e1       	ldi	r24, 0x18	; 24
    216a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (UCSRC & 0xC1) | ((Config_Ptr ->parity) <<4) | ((Config_Ptr ->bit_data) <<1) | ((Config_Ptr ->stop_bit) <<3);
    216c:	a0 e4       	ldi	r26, 0x40	; 64
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e0 e4       	ldi	r30, 0x40	; 64
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	81 74       	andi	r24, 0x41	; 65
    2178:	28 2f       	mov	r18, r24
    217a:	20 68       	ori	r18, 0x80	; 128
    217c:	eb 81       	ldd	r30, Y+3	; 0x03
    217e:	fc 81       	ldd	r31, Y+4	; 0x04
    2180:	81 81       	ldd	r24, Z+1	; 0x01
    2182:	88 2f       	mov	r24, r24
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	82 95       	swap	r24
    2188:	92 95       	swap	r25
    218a:	90 7f       	andi	r25, 0xF0	; 240
    218c:	98 27       	eor	r25, r24
    218e:	80 7f       	andi	r24, 0xF0	; 240
    2190:	98 27       	eor	r25, r24
    2192:	28 2b       	or	r18, r24
    2194:	eb 81       	ldd	r30, Y+3	; 0x03
    2196:	fc 81       	ldd	r31, Y+4	; 0x04
    2198:	80 81       	ld	r24, Z
    219a:	88 2f       	mov	r24, r24
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	28 2b       	or	r18, r24
    21a4:	eb 81       	ldd	r30, Y+3	; 0x03
    21a6:	fc 81       	ldd	r31, Y+4	; 0x04
    21a8:	82 81       	ldd	r24, Z+2	; 0x02
    21aa:	88 2f       	mov	r24, r24
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	82 2b       	or	r24, r18
    21bc:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    21be:	eb 81       	ldd	r30, Y+3	; 0x03
    21c0:	fc 81       	ldd	r31, Y+4	; 0x04
    21c2:	83 81       	ldd	r24, Z+3	; 0x03
    21c4:	94 81       	ldd	r25, Z+4	; 0x04
    21c6:	a5 81       	ldd	r26, Z+5	; 0x05
    21c8:	b6 81       	ldd	r27, Z+6	; 0x06
    21ca:	88 0f       	add	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	aa 1f       	adc	r26, r26
    21d0:	bb 1f       	adc	r27, r27
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	aa 1f       	adc	r26, r26
    21d8:	bb 1f       	adc	r27, r27
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	aa 1f       	adc	r26, r26
    21e0:	bb 1f       	adc	r27, r27
    21e2:	9c 01       	movw	r18, r24
    21e4:	ad 01       	movw	r20, r26
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	92 e1       	ldi	r25, 0x12	; 18
    21ea:	aa e7       	ldi	r26, 0x7A	; 122
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 c3 11 	call	0x2386	; 0x2386 <__udivmodsi4>
    21f6:	da 01       	movw	r26, r20
    21f8:	c9 01       	movw	r24, r18
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	9a 83       	std	Y+2, r25	; 0x02
    21fe:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2200:	e0 e4       	ldi	r30, 0x40	; 64
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	89 2f       	mov	r24, r25
    220a:	99 27       	eor	r25, r25
    220c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    220e:	e9 e2       	ldi	r30, 0x29	; 41
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	80 83       	st	Z, r24
}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	cf 91       	pop	r28
    2220:	df 91       	pop	r29
    2222:	08 95       	ret

00002224 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2224:	df 93       	push	r29
    2226:	cf 93       	push	r28
    2228:	0f 92       	push	r0
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2230:	eb e2       	ldi	r30, 0x2B	; 43
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	80 72       	andi	r24, 0x20	; 32
    223c:	90 70       	andi	r25, 0x00	; 0
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	b9 f3       	breq	.-18     	; 0x2230 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2242:	ec e2       	ldi	r30, 0x2C	; 44
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    224a:	0f 90       	pop	r0
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    225a:	eb e2       	ldi	r30, 0x2B	; 43
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	88 23       	and	r24, r24
    2262:	dc f7       	brge	.-10     	; 0x225a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2264:	ec e2       	ldi	r30, 0x2C	; 44
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
}
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	00 d0       	rcall	.+0      	; 0x2276 <UART_sendString+0x6>
    2276:	0f 92       	push	r0
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	9b 83       	std	Y+3, r25	; 0x03
    227e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2280:	19 82       	std	Y+1, r1	; 0x01
    2282:	0e c0       	rjmp	.+28     	; 0x22a0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	9b 81       	ldd	r25, Y+3	; 0x03
    228e:	fc 01       	movw	r30, r24
    2290:	e2 0f       	add	r30, r18
    2292:	f3 1f       	adc	r31, r19
    2294:	80 81       	ld	r24, Z
    2296:	0e 94 12 11 	call	0x2224	; 0x2224 <UART_sendByte>
		i++;
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	9b 81       	ldd	r25, Y+3	; 0x03
    22aa:	fc 01       	movw	r30, r24
    22ac:	e2 0f       	add	r30, r18
    22ae:	f3 1f       	adc	r31, r19
    22b0:	80 81       	ld	r24, Z
    22b2:	88 23       	and	r24, r24
    22b4:	39 f7       	brne	.-50     	; 0x2284 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <UART_receiveString+0xa>
    22cc:	0f 92       	push	r0
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	9b 83       	std	Y+3, r25	; 0x03
    22d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22d6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	8c 01       	movw	r16, r24
    22e4:	02 0f       	add	r16, r18
    22e6:	13 1f       	adc	r17, r19
    22e8:	0e 94 29 11 	call	0x2252	; 0x2252 <UART_recieveByte>
    22ec:	f8 01       	movw	r30, r16
    22ee:	80 83       	st	Z, r24
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	9b 81       	ldd	r25, Y+3	; 0x03
    2302:	8c 01       	movw	r16, r24
    2304:	02 0f       	add	r16, r18
    2306:	13 1f       	adc	r17, r19
    2308:	0e 94 29 11 	call	0x2252	; 0x2252 <UART_recieveByte>
    230c:	f8 01       	movw	r30, r16
    230e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	fc 01       	movw	r30, r24
    231c:	e2 0f       	add	r30, r18
    231e:	f3 1f       	adc	r31, r19
    2320:	80 81       	ld	r24, Z
    2322:	83 32       	cpi	r24, 0x23	; 35
    2324:	31 f7       	brne	.-52     	; 0x22f2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	9b 81       	ldd	r25, Y+3	; 0x03
    2330:	fc 01       	movw	r30, r24
    2332:	e2 0f       	add	r30, r18
    2334:	f3 1f       	adc	r31, r19
    2336:	10 82       	st	Z, r1
}
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	08 95       	ret

00002348 <__mulsi3>:
    2348:	62 9f       	mul	r22, r18
    234a:	d0 01       	movw	r26, r0
    234c:	73 9f       	mul	r23, r19
    234e:	f0 01       	movw	r30, r0
    2350:	82 9f       	mul	r24, r18
    2352:	e0 0d       	add	r30, r0
    2354:	f1 1d       	adc	r31, r1
    2356:	64 9f       	mul	r22, r20
    2358:	e0 0d       	add	r30, r0
    235a:	f1 1d       	adc	r31, r1
    235c:	92 9f       	mul	r25, r18
    235e:	f0 0d       	add	r31, r0
    2360:	83 9f       	mul	r24, r19
    2362:	f0 0d       	add	r31, r0
    2364:	74 9f       	mul	r23, r20
    2366:	f0 0d       	add	r31, r0
    2368:	65 9f       	mul	r22, r21
    236a:	f0 0d       	add	r31, r0
    236c:	99 27       	eor	r25, r25
    236e:	72 9f       	mul	r23, r18
    2370:	b0 0d       	add	r27, r0
    2372:	e1 1d       	adc	r30, r1
    2374:	f9 1f       	adc	r31, r25
    2376:	63 9f       	mul	r22, r19
    2378:	b0 0d       	add	r27, r0
    237a:	e1 1d       	adc	r30, r1
    237c:	f9 1f       	adc	r31, r25
    237e:	bd 01       	movw	r22, r26
    2380:	cf 01       	movw	r24, r30
    2382:	11 24       	eor	r1, r1
    2384:	08 95       	ret

00002386 <__udivmodsi4>:
    2386:	a1 e2       	ldi	r26, 0x21	; 33
    2388:	1a 2e       	mov	r1, r26
    238a:	aa 1b       	sub	r26, r26
    238c:	bb 1b       	sub	r27, r27
    238e:	fd 01       	movw	r30, r26
    2390:	0d c0       	rjmp	.+26     	; 0x23ac <__udivmodsi4_ep>

00002392 <__udivmodsi4_loop>:
    2392:	aa 1f       	adc	r26, r26
    2394:	bb 1f       	adc	r27, r27
    2396:	ee 1f       	adc	r30, r30
    2398:	ff 1f       	adc	r31, r31
    239a:	a2 17       	cp	r26, r18
    239c:	b3 07       	cpc	r27, r19
    239e:	e4 07       	cpc	r30, r20
    23a0:	f5 07       	cpc	r31, r21
    23a2:	20 f0       	brcs	.+8      	; 0x23ac <__udivmodsi4_ep>
    23a4:	a2 1b       	sub	r26, r18
    23a6:	b3 0b       	sbc	r27, r19
    23a8:	e4 0b       	sbc	r30, r20
    23aa:	f5 0b       	sbc	r31, r21

000023ac <__udivmodsi4_ep>:
    23ac:	66 1f       	adc	r22, r22
    23ae:	77 1f       	adc	r23, r23
    23b0:	88 1f       	adc	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	1a 94       	dec	r1
    23b6:	69 f7       	brne	.-38     	; 0x2392 <__udivmodsi4_loop>
    23b8:	60 95       	com	r22
    23ba:	70 95       	com	r23
    23bc:	80 95       	com	r24
    23be:	90 95       	com	r25
    23c0:	9b 01       	movw	r18, r22
    23c2:	ac 01       	movw	r20, r24
    23c4:	bd 01       	movw	r22, r26
    23c6:	cf 01       	movw	r24, r30
    23c8:	08 95       	ret

000023ca <__prologue_saves__>:
    23ca:	2f 92       	push	r2
    23cc:	3f 92       	push	r3
    23ce:	4f 92       	push	r4
    23d0:	5f 92       	push	r5
    23d2:	6f 92       	push	r6
    23d4:	7f 92       	push	r7
    23d6:	8f 92       	push	r8
    23d8:	9f 92       	push	r9
    23da:	af 92       	push	r10
    23dc:	bf 92       	push	r11
    23de:	cf 92       	push	r12
    23e0:	df 92       	push	r13
    23e2:	ef 92       	push	r14
    23e4:	ff 92       	push	r15
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	ca 1b       	sub	r28, r26
    23f4:	db 0b       	sbc	r29, r27
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	09 94       	ijmp

00002402 <__epilogue_restores__>:
    2402:	2a 88       	ldd	r2, Y+18	; 0x12
    2404:	39 88       	ldd	r3, Y+17	; 0x11
    2406:	48 88       	ldd	r4, Y+16	; 0x10
    2408:	5f 84       	ldd	r5, Y+15	; 0x0f
    240a:	6e 84       	ldd	r6, Y+14	; 0x0e
    240c:	7d 84       	ldd	r7, Y+13	; 0x0d
    240e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2410:	9b 84       	ldd	r9, Y+11	; 0x0b
    2412:	aa 84       	ldd	r10, Y+10	; 0x0a
    2414:	b9 84       	ldd	r11, Y+9	; 0x09
    2416:	c8 84       	ldd	r12, Y+8	; 0x08
    2418:	df 80       	ldd	r13, Y+7	; 0x07
    241a:	ee 80       	ldd	r14, Y+6	; 0x06
    241c:	fd 80       	ldd	r15, Y+5	; 0x05
    241e:	0c 81       	ldd	r16, Y+4	; 0x04
    2420:	1b 81       	ldd	r17, Y+3	; 0x03
    2422:	aa 81       	ldd	r26, Y+2	; 0x02
    2424:	b9 81       	ldd	r27, Y+1	; 0x01
    2426:	ce 0f       	add	r28, r30
    2428:	d1 1d       	adc	r29, r1
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	ed 01       	movw	r28, r26
    2436:	08 95       	ret

00002438 <_exit>:
    2438:	f8 94       	cli

0000243a <__stop_program>:
    243a:	ff cf       	rjmp	.-2      	; 0x243a <__stop_program>
